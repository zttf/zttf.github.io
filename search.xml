<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springBoot之Web部分</title>
      <link href="/post/a45ffcf7.html"/>
      <url>/post/a45ffcf7.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-springMVC自动配置"><a href="#一-springMVC自动配置" class="headerlink" title="一.springMVC自动配置"></a>一.springMVC自动配置</h1><h1 id="二-简单功能分析"><a href="#二-简单功能分析" class="headerlink" title="二 .简单功能分析"></a>二 .简单功能分析</h1><h1 id="三-请求参数处理"><a href="#三-请求参数处理" class="headerlink" title="三.请求参数处理"></a>三.请求参数处理</h1><h2 id="0、请求映射"><a href="#0、请求映射" class="headerlink" title="0、请求映射"></a>0、请求映射</h2><h3 id="1、rest使用与原理"><a href="#1、rest使用与原理" class="headerlink" title="1、rest使用与原理"></a>1、rest使用与原理</h3><ul><li><p>@xxxMapping；</p></li><li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p></li><li><ul><li><em>以前：</em><em>&#x2F;getUser</em>  <em>获取用户</em>    <em>&#x2F;deleteUser</em> <em>删除用户</em>   <em>&#x2F;editUser</em>  <em>修改用户</em>      <em>&#x2F;saveUser</em> <em>保存用户</em></li><li><em>现在： &#x2F;user</em>    *GET-*<em>获取用户</em>    *DELETE-*<em>删除用户</em>     *PUT-*<em>修改用户</em>      *POST-*<em>保存用户</em></li><li>核心Filter；HiddenHttpMethodFilter</li></ul></li><li><ul><li><ul><li>用法： 表单method&#x3D;post，隐藏域 _method&#x3D;put</li><li>SpringBoot中手动开启</li></ul></li></ul></li><li><ul><li>扩展：如何把_method 这个名字换成我们自己喜欢的。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">putUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">methodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        methodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodFilter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Rest原理（表单提交要使用REST的时候）</p><ul><li><p>表单提交会带上**_method&#x3D;PUT**</p></li><li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p></li><li><ul><li>请求是否正常，并且是POST</li></ul></li><li><ul><li><ul><li>获取到**_method**的值。</li><li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li><li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li><li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。</strong></li></ul></li></ul></li></ul><p><strong>Rest使用客户端工具，</strong></p><ul><li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure><h3 id="2、请求映射原理"><a href="#2、请求映射原理" class="headerlink" title="2、请求映射原理"></a>2、请求映射原理</h3><p><img src="/..%5Cimg%5Cmvc1.png" alt="img"></p><p><img src="/%5Cimg%5Cmvc1.png" alt="img"></p><p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br></pre></td></tr></table></figure><p><img src="/..%5Cimg%5Cmvc2.png" alt="img"></p><p><img src="/%5Cimg%5Cmvc2.png" alt="img"></p><p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p><p><img src="/..%5Cimg%5Cmvc3.png" alt="img"></p><p><img src="/%5Cimg%5Cmvc3.png" alt="img"></p><p>所有的请求映射都在HandlerMapping中。</p><ul><li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 &#x2F;能访问到index.html；</p></li><li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p></li><li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p></li><li><ul><li>如果有就找到这个请求对应的handler</li><li>如果没有就是下一个 HandlerMapping</li></ul></li><li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) &#123;</span><br><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-普通参数与基本注解"><a href="#1-普通参数与基本注解" class="headerlink" title="1.普通参数与基本注解"></a>1.普通参数与基本注解</h2><h3 id="1-1注解"><a href="#1-1注解" class="headerlink" title="1.1注解"></a>1.1注解</h3><p>@PathVariable、@RequestHeader、@RequestParam、@CookieValue、@RequestBody(post才有请求体，表单提交)，@RequestAttribute，@ModelAttribute、@MatrixVariable（矩阵变量）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterTestController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">getCar</span><span class="params">(   //获取/car/&#123;id&#125;类型的</span></span><br><span class="line"><span class="params">         <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span><br><span class="line"><span class="params">                                     //获取header的</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span><br><span class="line"><span class="params">                                     //获取/car？age=<span class="number">1</span>&amp;&amp;inters=<span class="number">2</span></span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span><br><span class="line"><span class="params">                                     </span></span><br><span class="line"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;headers&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="comment">//2、SpringBoot默认是禁用了矩阵变量的功能</span></span><br><span class="line">    <span class="comment">//      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。</span></span><br><span class="line">    <span class="comment">//              removeSemicolonContent（移除分号内容）支持矩阵变量的</span></span><br><span class="line">    <span class="comment">//3、矩阵变量必须有url路径变量才能被解析</span></span><br><span class="line">    <span class="comment">//4.如果cookie被禁用了，我们可以使用矩阵变量 /abc;jsessionid=xxx 把cookie带过来，将cookie的值作为矩阵变量的方式进行传递</span></span><br><span class="line">    session--》jsessionid---》cookie</span><br><span class="line">    获取/car;age=<span class="number">1</span>;inters=<span class="number">2</span>分号隔开</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class="line"><span class="params">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class="line"><span class="params">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class="line"><span class="params">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">goToPage</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;成功了...&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;  <span class="comment">//转发到  /success请求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/params&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(Map&lt;String,Object&gt; map,</span></span><br><span class="line"><span class="params">                        Model model,</span></span><br><span class="line"><span class="params">                        HttpServletRequest request,</span></span><br><span class="line"><span class="params">                        HttpServletResponse response)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world666&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;hello666&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map <span class="title function_">success</span><span class="params">(<span class="meta">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span></span><br><span class="line"><span class="params">                   <span class="meta">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span></span><br><span class="line"><span class="params">                   HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">msg1</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">hello</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">world</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">message</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;message&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class="line">    map.put(<span class="string">&quot;annotation_msg&quot;</span>,msg);</span><br><span class="line">    map.put(<span class="string">&quot;hello&quot;</span>,hello);</span><br><span class="line">    map.put(<span class="string">&quot;world&quot;</span>,world);</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java常用类和基础APi</title>
      <link href="/post/18df9c7b.html"/>
      <url>/post/18df9c7b.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-String"><a href="#一-String" class="headerlink" title="一.String"></a>一.String</h1><h2 id="1-String的特性"><a href="#1-String的特性" class="headerlink" title="1 String的特性"></a>1 String的特性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1. String类的理解(以JDK8为例说明)</span><br><span class="line">1.1 类的声明</span><br><span class="line">public final class String</span><br><span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence</span><br><span class="line"></span><br><span class="line">&gt; final:String是不可被继承的</span><br><span class="line">&gt; Serializable:可序列化的接口。凡是实现此接口的类的对象就可以通过网络或本地流进行数据的传输。</span><br><span class="line">&gt; Comparable:凡是实现此接口的类，其对象都可以比较大小。</span><br><span class="line"></span><br><span class="line">1.2 内部声明的属性：</span><br><span class="line">jdk8中：</span><br><span class="line">private final char value[]; //存储字符串数据的容器</span><br><span class="line">    &gt; final : 指明此value数组一旦初始化，其地址就不可变。</span><br><span class="line"></span><br><span class="line">jdk9开始：为了节省内存空间，做了优化</span><br><span class="line">private final byte[] value; //存储字符串数据的容器。</span><br><span class="line"></span><br><span class="line">2. 字符串常量的存储位置</span><br><span class="line">&gt; 字符串常量都存储在字符串常量池(StringTable)中</span><br><span class="line">&gt; 字符串常量池不允许存放两个相同的字符串常量。</span><br><span class="line">&gt; 字符串常量池，在不同的jdk版本中，存放位置不同。</span><br><span class="line">  jdk7之前：字符串常量池存放在方法区</span><br><span class="line">  jdk7及之后：字符串常量池存放在堆空间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. String的不可变性的理解</span><br><span class="line">① 当对字符串变量重新赋值时，需要重新指定一个字符串常量的位置进行赋值，不能在原有的位置修改</span><br><span class="line">② 当对现有的字符串进行拼接操作时，需要重新开辟空间保存拼接以后的字符串，不能在原有的位置修改</span><br><span class="line">③ 当调用字符串的replace()替换现有的某个字符时，需要重新开辟空间保存修改以后的字符串，不能在原有的位置修改</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. String实例化的两种方式</span><br><span class="line">第1种方式：String s1 = &quot;hello&quot;;</span><br><span class="line">第2种方式：String s2 = new String(&quot;hello&quot;);</span><br></pre></td></tr></table></figure><p><img src="/..%5Cimg%5Cstring1.png" alt="image-20230630110755556"></p><p><img src="/%5Cimg%5Cstring1.png" alt="image-20230630110755556"></p><h2 id="2-String的构造器"><a href="#2-String的构造器" class="headerlink" title="2.String的构造器"></a>2.String的构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字面量定义方式：字符串常量对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：无参构造</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：创建&quot;hello&quot;字符串常量的副本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：通过字符数组构造</span></span><br><span class="line"><span class="type">char</span> chars[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars); <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器定义方式：通过字节数组构造byte bytes[] = &#123;97, 98, 99 &#125;; String str5 = new String(bytes);</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-String常用APi"><a href="#3-String常用APi" class="headerlink" title="3.String常用APi"></a>3.String常用APi</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul><li>（1）boolean isEmpty()：字符串是否为空 </li><li>（2）int length()：返回字符串的长度 </li><li>（3）String concat(xx)：拼接 </li><li>（4）boolean equals(Object obj)：比较字符串是否相等，区分大小写 </li><li>（5）boolean equalsIgnoreCase(Object obj)：比较字符串是否相等，不区分大小写 </li><li>（6）int compareTo(String other)：比较字符串大小，区分大小写，按照 Unicode 编码值比较大小 </li><li>（7）int compareToIgnoreCase(String other)：比较字符串大小，不区分大小写 </li><li>（8） String toLowerCase()：将字符串中大写字母转为小写 </li><li>（9）String toUpperCase()：将字符串中小写字母转为大写 </li><li>（10）String trim()：去掉字符串前后空白符 </li><li>（11）public String intern()：结果在常量池中共享</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>（11）boolean contains(xx)：是否包含 xx </li><li>（12）int indexOf(xx)：从前往后找当前字符串中 xx，即如果有返回第一次出现的下标，要是没有返回-1 </li><li>（13） int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始 </li><li>（14）int lastIndexOf(xx)：从后往前找当前字符串中 xx，即如果有返回最后一次出现的下标，要是没有返回-1 </li><li>（15）int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次现处的索引，从指定的索引开始反向搜索。</li></ul><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><ul><li><p>（16）String substring(int beginIndex) ：返回一个新的字符串，它是此字符串的从 beginIndex 开始截取到最后的一个子字符串。</p></li><li><p>（17）String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从 beginIndex 开始截取到 endIndex(不包含)的一个子字符串。</p></li></ul><h3 id="与字符-x2F-字符数组相关"><a href="#与字符-x2F-字符数组相关" class="headerlink" title="与字符&#x2F;字符数组相关"></a>与字符&#x2F;字符数组相关</h3><ul><li>（18）char charAt(index)：返回[index]位置的字符 </li><li>（19）char[] toCharArray()： 将此字符串转换为一个新的字符数组返回 </li><li>（20）static String valueOf(char[] data) ：返回指定数组中表示该字符序列的 String </li><li>（21）static String valueOf(char[] data, int offset, int count) ： 返回指定数组中表示该字符序列的 String </li><li>（22）static String copyValueOf(char[] data)： 返回指定数组中表示该字符序列的 String </li><li>（23）static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String</li></ul><h3 id="开头与结尾"><a href="#开头与结尾" class="headerlink" title="开头与结尾"></a>开头与结尾</h3><ul><li>（24）boolean startsWith(xx)：测试此字符串是否以指定的前缀开始  </li><li>（25） boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始 </li><li>（26）boolean endsWith(xx)：测试此字符串是否以指定的后缀结束</li></ul><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul><li>（27）String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中���现的所有 oldChar 得到的。 不支持正</li><li>（28）String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符 串。  </li><li>（29）String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。  </li><li>（30） String replaceFirst(String regex, String replacement)：使用给定的 replacement替换此字符串匹配给定的正则表达式的第一个子字符串。</li></ul><h1 id="二-字符串相关类之可变字符序列：StringBuffer、StringBuilder"><a href="#二-字符串相关类之可变字符序列：StringBuffer、StringBuilder" class="headerlink" title="二 字符串相关类之可变字符序列：StringBuffer、StringBuilder"></a>二 字符串相关类之可变字符序列：StringBuffer、StringBuilder</h1><h2 id="1-对于StringBuffer和StringBuilder的理解"><a href="#1-对于StringBuffer和StringBuilder的理解" class="headerlink" title="1.对于StringBuffer和StringBuilder的理解"></a>1.对于StringBuffer和StringBuilder的理解</h2><ul><li><p>java.lang.StringBuffer 代表可变的字符序列，JDK1.0 中声明，可以对字符串内容进行增删，此时不会产生新的对象。</p></li><li><p>StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且提供相关功能的方法也一样。</p></li><li><p>区分 String、StringBuffer、StringBuilder</p></li></ul><p>– String:不可变的字符序列； 底层使用 char[]数组存储(JDK8.0 中)</p><p>– StringBuffer:可变的字符序列；线程安全（方法有 synchronized 修饰），效率低；底层使用 char[]数组存储 (JDK8.0 中)</p><p>– StringBuilder:可变的字符序列； jdk1.5 引入，线程不安全的，效率高；底层使用 char[]数组存储(JDK8.0 中)</p><h2 id="2-StringBuilder、StringBuffer的API"><a href="#2-StringBuilder、StringBuffer的API" class="headerlink" title="2.StringBuilder、StringBuffer的API"></a>2.StringBuilder、StringBuffer的API</h2><ul><li><p>（1）StringBuffer append(xx)：提供了很多的 append()方法，用于进行字符串追加的方式拼接</p></li><li><p>（2）StringBuffer delete(int start, int end)：删除[start,end)之间字符 </p></li><li><p>（3）StringBuffer deleteCharAt(int index)：删除[index]位置字符 </p></li><li><p>（4） StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为 str </p></li><li><p>（5）void setCharAt(int index, char c)：替换[index]位置字符 </p></li><li><p>(6）char charAt(int index)：查找指定 index 位置上的字符 </p></li><li><p>（7）StringBuffer insert(int index, xx)：在[index]位置插入 xx </p></li><li><p>（8）int length()：返回存储的字符数据的长度 </p></li><li><p>（9）StringBuffer reverse()：反转</p></li><li><p>（1） int indexOf(String str)：在当前字符序列中查询 str 的第一次出现下标</p></li><li><p>（2） int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询 str 的第一次出现下标 </p></li><li><p>（3）int lastIndexOf(String str)：在当前字符序列中查询 str 的最后一次出现下标 </p></li><li><p>（4）int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询 str 的最后一次出现下标 </p></li><li><p>（5）String substring(int start)：截取当前字符序列[start,最后] </p></li><li><p>（6）String substring(int start, int end)：截取当前字符序列[start,end) </p></li><li><p>（7）String toString()：返回此序列中数据的字符串表示形式 </p></li><li><p>（8）void setLength(int newLength) ：设置当前字符序列长度为 newLength</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础之数组</title>
      <link href="/post/cacf5cc9.html"/>
      <url>/post/cacf5cc9.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-数组介绍"><a href="#一-数组介绍" class="headerlink" title="一.数组介绍"></a>一.数组介绍</h2><h3 id="1-数组的概念"><a href="#1-数组的概念" class="headerlink" title="1.数组的概念"></a>1.数组的概念</h3><p><strong>数组(Array)：</strong>是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p><h3 id="2-数组的特点"><a href="#2-数组的特点" class="headerlink" title="2.数组的特点"></a>2.数组的特点</h3><p>• 数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类 型和引用数据类型。</p><p>• 创建数组对象会在内存中开辟一整块连续的空间。占据的空间的大小，取决于数组的长度和数组中元素的类型。</p><p>• 数组中的元素在内存中是依次紧密排列的，有序的。</p><p>• 数组，一旦初始化完成，其长度就是确定的。数组的长度一旦确定，就不能修改。</p><p>• 我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</p><p>• 数组名中引用的是这块连续空间的首地址。</p><h3 id="3-数组的分类"><a href="#3-数组的分类" class="headerlink" title="3.数组的分类"></a>3.数组的分类</h3><p>• 一维数组：存储一组数据</p><p>•二维数组：存储多组数据，相当于二维表，一行代表一组数据，只是这里的二维表每一行长度不要求一样。</p><p> <img src="/..%5Cimg%5Cs1.jpg" alt="img"></p><p><img src="/%5Cimg%5Cs1.jpg" alt="img"></p><h2 id="二-一维数组"><a href="#二-一维数组" class="headerlink" title="二.一维数组"></a>二.一维数组</h2><h3 id="1-声明"><a href="#1-声明" class="headerlink" title="1.声明"></a>1.声明</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>*&#x2F;&#x2F;*推荐</p><p>元素的数据类型[] 一维数组的名称;</p><p>*&#x2F;&#x2F;*不推荐</p><p>元素的数据类型 一维数组名[];</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>int[] arr;</p><p> int arr1[];</p><p>double[] arr2;</p><p>String[] arr3; *&#x2F;&#x2F;*引用类型变量数组</p><p><strong>注意</strong>：Java 语言中声明数组时不能指定其长度(数组中元素的个数)。 例如：</p><p>int a[5]; &#x2F;&#x2F;非法</p><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><h4 id="一维数组声明和静态初始化格式1："><a href="#一维数组声明和静态初始化格式1：" class="headerlink" title="一维数组声明和静态初始化格式1："></a>一维数组声明和静态初始化格式1：</h4><p>例如，定义存储 1，2，3，4，5 整数的数组容器。</p><p>int[] arr &#x3D; <strong>new</strong> int[]{1,2,3,4,5};*&#x2F;&#x2F;*正确</p><p>*&#x2F;&#x2F;*或</p><p>int[] arr;</p><p>arr &#x3D; <strong>new</strong> int[]{1,2,3,4,5};*&#x2F;&#x2F;*正确</p><h4 id="一维数组声明和静态初始化格式2："><a href="#一维数组声明和静态初始化格式2：" class="headerlink" title="一维数组声明和静态初始化格式2："></a>一维数组声明和静态初始化格式2：</h4><p>例如，定义存储 1，2，3，4，5 整数的数组容器</p><p>int[] arr &#x3D; {1,2,3,4,5};*&#x2F;&#x2F;*正确int[] arr;</p><p>arr &#x3D; {1,2,3,4,5};*&#x2F;&#x2F;*错误</p><h4 id="一维数组动态声明和初始化"><a href="#一维数组动态声明和初始化" class="headerlink" title="一维数组动态声明和初始化"></a>一维数组动态声明和初始化</h4><h4 id="举例1：正确写法"><a href="#举例1：正确写法" class="headerlink" title="举例1：正确写法"></a>举例1：正确写法</h4><p>int[] arr &#x3D; <strong>new</strong> int[5]; </p><p>int[] arr;</p><p>arr &#x3D; <strong>new</strong> int[5];</p><h4 id="举例2：错误写法"><a href="#举例2：错误写法" class="headerlink" title="举例2：错误写法"></a>举例2：错误写法</h4><p>int[] arr &#x3D; <strong>new</strong> int[5]{1,2,3,4,5};*&#x2F;&#x2F;<em>错误的，后面有</em>{}<em>指定元素列表，就不需要在</em>[]*中指定元素个数了。</p><h3 id="3-数组元素的默认值"><a href="#3-数组元素的默认值" class="headerlink" title="3.数组元素的默认值"></a>3.数组元素的默认值</h3><p><img src="/../img/list1.png" alt="img"></p><p><img src="/img/list1.png" alt="img"></p><h3 id="4-数组在java虚拟机中的内存分划"><a href="#4-数组在java虚拟机中的内存分划" class="headerlink" title="4.数组在java虚拟机中的内存分划"></a>4.数组在java虚拟机中的内存分划</h3><h4 id="1-jvm的图"><a href="#1-jvm的图" class="headerlink" title="1.jvm的图"></a>1.jvm的图</h4><p><img src="/..%5Cimg%5Clist2.png" alt="image-20230629102555178"></p><p><img src="/%5Cimg%5Clist2.png" alt="image-20230629102555178"></p><h4 id="2-运行时数据区各部分作用"><a href="#2-运行时数据区各部分作用" class="headerlink" title="2.运行时数据区各部分作用"></a>2.运行时数据区各部分作用</h4><table><thead><tr><th>区域 名称</th><th>作用</th></tr></thead><tbody><tr><td>虚拟机栈</td><td>用于存储正在执行的每个 Java 方法的局部变量表等。局部变量表存放了编译期可知长度<br/>的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr><tr><td>堆内存</td><td>存储对象（包括数组对象），new 来创建的，都存储在堆内存。</td></tr><tr><td>方法区</td><td>存储已被虚拟机加载的类信息、常量、（静态变量）、即时编译器编 译后的代码等数据。</td></tr><tr><td>本地方法栈</td><td>当程序中调用了 native 的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>程序计数器</td><td>程序计数器是 CPU 中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr></tbody></table><h3 id="3-一维数组在内存中的存储"><a href="#3-一维数组在内存中的存储" class="headerlink" title="3.一维数组在内存中的存储"></a>3.一维数组在内存中的存储</h3><p><img src="/..%5Cimg%5Carray1.png" alt="image-20230629103036975"></p><p><img src="/%5Cimg%5Carray1.png" alt="image-20230629103036975"></p><h4 id="3-1-2个变量指向同一个数组"><a href="#3-1-2个变量指向同一个数组" class="headerlink" title="3.1 2个变量指向同一个数组"></a>3.1 2个变量指向同一个数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 定义数组，存储 3 个元素</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//数组索引进行赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//输入 3 个索引上的元素值</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//定义数组变量 arr2，将 arr 的地址赋值给arr2</span></span><br><span class="line"><span class="type">int</span>[] arr2 = arr; arr2[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存图分析：</p><p><img src="/%5Cimg%5Carr2.png" alt="image-20230629104123955"></p><p><img src="/..%5Cimg%5Carr2.png" alt="image-20230629104123955"></p><h2 id="二-多维数组"><a href="#二-多维数组" class="headerlink" title="二.多维数组"></a>二.多维数组</h2><h3 id="1-声明-1"><a href="#1-声明-1" class="headerlink" title="1.声明"></a>1.声明</h3><p>二维数组声明的语法格式：</p><p>*&#x2F;&#x2F;*推荐</p><p>元素的数据类型[][] 二维数组的名称;</p><p>*&#x2F;&#x2F;*不推荐</p><p>元素的数据类型 二维数组名[][];</p><p>*&#x2F;&#x2F;*不推荐</p><p>元素的数据类型[] 二维数组名[];</p><p><strong>面试</strong>：</p><p>int[] x, y[];</p><p>&#x2F;&#x2F;x 是一维数组，y 是二维数组</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test20TwoDimensionalArrayDefine</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//存储多组成绩</span></span><br><span class="line">    <span class="type">int</span>[][] grades;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储多组姓名</span></span><br><span class="line">    String[][] names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-初始化-1"><a href="#2-初始化-1" class="headerlink" title="2.初始化"></a>2.初始化</h3><h4 id="2-1-静态初始化"><a href="#2-1-静态初始化" class="headerlink" title="2.1 静态初始化"></a>2.1 静态初始化</h4><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = **<span class="keyword">new</span>** <span class="type">int</span>[][]&#123;&#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>定义一个名称为 arr 的二维数组，二维数组中有三个一维数组</p><p>• 每一个一维数组中具体元素也都已初始化</p><p>• 第一个一维数组 arr[0] &#x3D; {3,8,2};</p><p>• 第二个一维数组 arr[1] &#x3D; {2,7};</p><p>• 第三个一维数组 arr[2] &#x3D; {9,0,1,6};</p><p>第三个一维数组的长度表示方式：arr[2].length</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;<span class="comment">//声明与初始化必须在一句完成</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;&#125;;<span class="comment">//错误，静态初始化右边new 数据类型[][]中不能写数字,动态可以</span></span><br></pre></td></tr></table></figure><h4 id="2-2-动态初始化"><a href="#2-2-动态初始化" class="headerlink" title="2.2 动态初始化"></a>2.2 动态初始化</h4><p>如果二维数组的每一个数据，甚至是每一行的列数，需要后期单独确定，那么就只能使用动态初始化方式了。动态初始化方式分为两种格式：</p><p><strong>格式1：规则二维表：每一行的列数是相同的</strong></p><p>（<em>1</em>）确定行数和列数</p><p>元素的数据类型[][] 二维数组名 &#x3D; <strong>new</strong> 元素的数据类型[m][n];</p><h6 id="x2F-x2F-其中，m-表示这个二维数组有多少个一维数组。或者说一共二维表有几行"><a href="#x2F-x2F-其中，m-表示这个二维数组有多少个一维数组。或者说一共二维表有几行" class="headerlink" title="*&#x2F;&#x2F;其中，m:*表示这个二维数组有多少个一维数组。或者说一共二维表有几行"></a>*&#x2F;&#x2F;<em>其中，</em>m:*表示这个二维数组有多少个一维数组。或者说一共二维表有几行</h6><p>*&#x2F;&#x2F;<em>其中，</em>n:*表示每一个一维数组的元素有多少个。或者说每一行共有一个单元格</p><h6 id="x2F-x2F-此时创建完数组，行数、列数确定，而且元素也都有默认值"><a href="#x2F-x2F-此时创建完数组，行数、列数确定，而且元素也都有默认值" class="headerlink" title="*&#x2F;&#x2F;*此时创建完数组，行数、列数确定，而且元素也都有默认值"></a>*&#x2F;&#x2F;*此时创建完数组，行数、列数确定，而且元素也都有默认值</h6><p><em>&#x2F;&#x2F;<em>（</em>2</em>）再为元素赋新值</p><p>二维数组名[行下标][列下标] &#x3D; 值;</p><p>举例：</p><p>int[][] arr &#x3D; <strong>new</strong> int[3][2];</p><ol><li><p>定义了名称为 arr 的二维数组</p></li><li><p>二维数组中有 3 个一维数组</p></li><li><p>每一个一维数组中有 2 个元素</p></li><li><p>一维数组的名称分别为 arr[0], arr[1], arr[2]</p></li><li><p>给第一个一维数组 1 脚标位赋值为 78 写法是：<em>arr[0][1] &#x3D; 78;</em></p></li></ol><p><strong>格式2：不规则：每一行的列数不同</strong></p><p><em>&#x2F;&#x2F;<em>（</em>1</em>）先确定总行数</p><p>元素的数据类型[][] 二维数组名 &#x3D; <strong>new</strong> 元素的数据类型[总行数][];</p><p><em>&#x2F;&#x2F;<em>此时只是确定了总行数，每一行里面现在是</em>null</em></p><h6 id="x2F-x2F-（2）再确定每一行的列数，创建每一行的一维数组"><a href="#x2F-x2F-（2）再确定每一行的列数，创建每一行的一维数组" class="headerlink" title="&#x2F;&#x2F;（2）再确定每一行的列数，创建每一行的一维数组"></a><em>&#x2F;&#x2F;<em>（</em>2</em>）再确定每一行的列数，创建每一行的一维数组</h6><p>二维数组名[行下标] &#x3D; <strong>new</strong> 元素的数据类型[该行的总列数];</p><p><em>&#x2F;&#x2F;<em>此时已经</em>new</em> 完的行的元素就有默认值了，没有<em>new</em> 的行还是<em>null</em></p><p>*&#x2F;&#x2F;(3)*再为元素赋值</p><p>二维数组名[行下标][列下标] &#x3D; 值;</p><p>举例：</p><p>int[][] arr &#x3D; <strong>new</strong> int[3][];</p><p>\1. 二维数组中有 3 个一维数组。</p><p>\2. 每个一维数组都是默认初始化值 null (注意：区别于格式 1）</p><p>\3. 可以对这个三个一维数组分别进行初始化：arr[0] &#x3D; new int[3]; arr[1] &#x3D; new int[1]; arr[2] &#x3D; new int[2];</p><h3 id="3-二维数组在内存中"><a href="#3-二维数组在内存中" class="headerlink" title="3.二维数组在内存中"></a>3.二维数组在内存中</h3><p><img src="/../img/array3.png"></p><p><img src="/img/array3.png"></p><h2 id="三-数组高级"><a href="#三-数组高级" class="headerlink" title="三.数组高级"></a>三.数组高级</h2><p>TODO</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础之集合</title>
      <link href="/post/2dab922c.html"/>
      <url>/post/2dab922c.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-Collection接口"><a href="#一-Collection接口" class="headerlink" title="一.Collection接口"></a>一.Collection接口</h1><p><img src="/../img/list3.png"></p><p><img src="/img/list3.png"></p><h2 id="1-java集合框架体系"><a href="#1-java集合框架体系" class="headerlink" title="1.java集合框架体系"></a>1.java集合框架体系</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> Java集合框架体系（java.util包下）</span><br><span class="line">java.util.Collection:存储一个一个的数据</span><br><span class="line"><span class="code">    |-----子接口：List:存储有序的、可重复的数据 (&quot;动态&quot;数组)</span></span><br><span class="line"><span class="code">           |---- ArrayList(主要实现类)、LinkedList、Vector</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    |-----子接口：Set:存储无序的、不可重复的数据(高中学习的集合)</span></span><br><span class="line"><span class="code">           |---- HashSet(主要实现类)、LinkedHashSet、TreeSet</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line">java.util.Map:存储一对一对的数据(key-value键值对，(x1,y1)、(x2,y2) --&gt; y=f(x),类似于高中的函数)</span><br><span class="line"><span class="code">    |---- HashMap(主要实现类)、LinkedHashMap、TreeMap、Hashtable、Properties</span></span><br></pre></td></tr></table></figure><h2 id="2-collection里的常用方法-15个"><a href="#2-collection里的常用方法-15个" class="headerlink" title="2.collection里的常用方法(15个)"></a>2.collection里的常用方法(15个)</h2><p><img src="/../img/list4.png" alt="img"></p><p><img src="/img/list4.png" alt="img"></p><h3 id="2-1-add-E-e"><a href="#2-1-add-E-e" class="headerlink" title="2.1 add(E e)"></a>2.1 add(E e)</h3><p>方法名称为：public boolean add(E e)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        System.out.println(collection1);</span><br></pre></td></tr></table></figure><p>   输出结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot; &quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=62230:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot; -Dfile.encoding=UTF-8 -classpath &quot;E:\java IDEA\java\out\production\until&quot; com.java.Demo3.text1</span><br><span class="line">[111, 222, 333]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="2-2-addAll-Collection-c"><a href="#2-2-addAll-Collection-c" class="headerlink" title="2.2 addAll(Collection c)"></a>2.2 addAll(Collection c)</h3><p>方法名称：public boolean addAll(Collection c)</p><p>API中描述：将指定集合中的所有元素添加到此集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//再创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        collection2.add(<span class="number">777</span>);</span><br><span class="line">        collection2.add(<span class="number">888</span>);</span><br><span class="line">        collection2.add(<span class="number">999</span>);</span><br><span class="line">        <span class="comment">//将指定集合元素添加到此集合中</span></span><br><span class="line">        collection1.addAll(collection2);<span class="comment">//就是将collection2集合中的所有元素添加到collection1中</span></span><br><span class="line">        System.out.println(collection1);<span class="comment">//打印collection1集合</span></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=62295:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line">[<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">777</span>, <span class="number">888</span>, <span class="number">999</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-3-clear"><a href="#2-3-clear" class="headerlink" title="2.3 clear()"></a>2.3 clear()</h3><p>方法名：public void clear()</p><p>API中描述：清空集合中的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//再创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        collection2.add(<span class="number">777</span>);</span><br><span class="line">        collection2.add(<span class="number">888</span>);</span><br><span class="line">        collection2.add(<span class="number">999</span>);</span><br><span class="line">        <span class="comment">//清空集合中的元素</span></span><br><span class="line">       collection1.clear();<span class="comment">//将collection1中的所有元素清空</span></span><br><span class="line">        System.out.println(collection1);<span class="comment">//打印collection1集合</span></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=62353:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-4-contains-Object-o"><a href="#2-4-contains-Object-o" class="headerlink" title="2.4 contains(Object o)"></a>2.4 contains(Object o)</h3><p>方法名称：public boolean contains(Object o)</p><p>API中描述：如果此collection包含指定的元素，则返回 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//再创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        <span class="comment">//如果此collection包含指定的元素，则返回 true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> collection1.contains(<span class="number">111</span>);<span class="comment">//查找collection1集合中是否包含111 如果包含返回true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> collection1.contains(<span class="number">555</span>);<span class="comment">//查找collection1集合中是否包含555 如果包含返回true</span></span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        System.out.println(flag1);</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=62423:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-5-containsAll-Collection-lt-gt-c"><a href="#2-5-containsAll-Collection-lt-gt-c" class="headerlink" title="2.5 containsAll(Collection&lt;?&gt; c)"></a>2.5 containsAll(Collection&lt;?&gt; c)</h3><p>方法名称：public boolean containsAll(Collection&lt;?&gt; c)</p><p>API中描述：如果此集合包含指定集合中的所有元素，则返回 true 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//再创建一个集合collection2collection1.add(111);</span></span><br><span class="line">    collection1.add(<span class="number">222</span>);</span><br><span class="line">    collection1.add(<span class="number">333</span>);</span><br><span class="line"> </span><br><span class="line">    collection2.add(<span class="number">777</span>);</span><br><span class="line">    collection2.add(<span class="number">888</span>);</span><br><span class="line">    collection2.add(<span class="number">999</span>);</span><br><span class="line">    collection2.add(<span class="number">111</span>);</span><br><span class="line">    collection2.add(<span class="number">222</span>);</span><br><span class="line">    collection2.add(<span class="number">333</span>);</span><br><span class="line">    <span class="comment">//如果此collection包含指定的元素，则返回 true</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> collection2.containsAll(collection1);<span class="comment">//这个是判断collection2中是否包含collection1中所有的集合，如果包含返回true</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> collection1.containsAll(collection2);<span class="comment">//这个是判断collection1中是否包含collection2中所有的集合，如果包含返回true</span></span><br><span class="line">    System.out.println(flag);</span><br><span class="line">    System.out.println(flag1);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=62495:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-6-isEmpty"><a href="#2-6-isEmpty" class="headerlink" title="2.6 isEmpty()"></a>2.6 isEmpty()</h3><p>方法名称：public boolean isEmpty()</p><p>API中描述：如果此集合不包含任何元素，则返回 true 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        <span class="comment">//通俗的来讲就是：判断一个集合是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> collection1.isEmpty();<span class="comment">//判断collection1是否为空，返回值为布尔类型。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> collection2.isEmpty();<span class="comment">//判断collection2是否为空，返回值为布尔类型。</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=53433:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-7-remove-Object-o"><a href="#2-7-remove-Object-o" class="headerlink" title="2.7 remove(Object o)"></a>2.7 remove(Object o)</h3><p>方法名称：public boolean remove(Object o)</p><p>API中描述：从此集合中移除指定元素的单个实例（如果存在）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        <span class="comment">//通俗的来讲就是：从一个集合中删除其其中的一个元素</span></span><br><span class="line">        collection1.remove(<span class="number">111</span>);</span><br><span class="line">        System.out.println(collection1);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=53996:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line">[<span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-8-removeAll-Collection-lt-gt-c"><a href="#2-8-removeAll-Collection-lt-gt-c" class="headerlink" title="2.8 removeAll(Collection&lt;?&gt; c)"></a>2.8 removeAll(Collection&lt;?&gt; c)</h3><p>方法名称：boolean removeAll(Collection&lt;?&gt; c)</p><p>API中描述：删除此集合的所有元素，这些元素也包含在指定的集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        collection1.add(<span class="number">444</span>);</span><br><span class="line">    collection2.add(<span class="number">222</span>);</span><br><span class="line">    collection2.add(<span class="number">333</span>);</span><br><span class="line">    collection2.add(<span class="number">777</span>);</span><br><span class="line">    collection2.add(<span class="number">888</span>);</span><br><span class="line">    <span class="comment">//通俗的来讲就是：从此集合中删除与指定集合中共有的元素</span></span><br><span class="line">    collection1.removeAll(collection2);</span><br><span class="line">    System.out.println(collection1);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=54200:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line">[<span class="number">111</span>, <span class="number">444</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-9-retainAll-Collection-c"><a href="#2-9-retainAll-Collection-c" class="headerlink" title="2.9 retainAll(Collection c)"></a>2.9 retainAll(Collection c)</h3><p>方法名称：boolean retainAll(Collection c)</p><p>API中描述：仅保留此集合中包含在指定集合中的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        collection1.add(<span class="number">444</span>);</span><br><span class="line">   collection2.add(<span class="number">222</span>);</span><br><span class="line">    collection2.add(<span class="number">333</span>);</span><br><span class="line">    collection2.add(<span class="number">777</span>);</span><br><span class="line">    collection2.add(<span class="number">888</span>);</span><br><span class="line">    <span class="comment">//通俗的来讲就是：只保留在此集合在指定集合中共同存在的元素</span></span><br><span class="line">    collection1.retainAll(collection2);</span><br><span class="line">    System.out.println(collection1);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=59333:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line">[<span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-10-size"><a href="#2-10-size" class="headerlink" title="2.10 size()"></a>2.10 size()</h3><p>方法名称：public int size()</p><p>API中描述：返回此集合中的元素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        Collection&lt;Integer&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection2</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        collection1.add(<span class="number">444</span>);</span><br><span class="line">   collection2.add(<span class="number">222</span>);</span><br><span class="line">    collection2.add(<span class="number">333</span>);</span><br><span class="line">    collection2.add(<span class="number">777</span>);</span><br><span class="line">    collection2.add(<span class="number">888</span>);</span><br><span class="line">    <span class="comment">//返回此集合中的元素个数。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> collection1.size();<span class="comment">//查看collection1中的元素个数，返回值值为int类型</span></span><br><span class="line">    System.out.println(a);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=59382:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-11-toArray"><a href="#2-11-toArray" class="headerlink" title="2.11 toArray()"></a>2.11 toArray()</h3><p>方法名称：public Object[] toArray()</p><p>API中描述：返回包含此集合中所有元素的数组。集合——–》数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;Integer&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        collection1.add(<span class="number">111</span>);</span><br><span class="line">        collection1.add(<span class="number">222</span>);</span><br><span class="line">        collection1.add(<span class="number">333</span>);</span><br><span class="line">        collection1.add(<span class="number">444</span>);</span><br><span class="line">        <span class="comment">//导出的是Object类型数组。</span></span><br><span class="line">        Object[] a = collection1.toArray();<span class="comment">//将集合变成一个Object数组类型</span></span><br><span class="line">        System.out.println(Arrays.toString(a));<span class="comment">//遍历a数组</span></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=59525:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.text1</span><br><span class="line">[<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>方法名称：asList()</p><p>API描述：将数组转集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">       String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;;</span><br><span class="line">       <span class="type">Collection</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(arr);</span><br><span class="line">       System.out.println(list);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;DD&quot;</span>);</span><br><span class="line">       System.out.println(list1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 com.atguigu01.collection.CollectionTest,test5</span><br><span class="line">[AA, BB, CC]</span><br><span class="line">[AA, BB, CC, DD]</span><br></pre></td></tr></table></figure><h3 id="2-12-toArray-T-a"><a href="#2-12-toArray-T-a" class="headerlink" title="2.12 toArray(T[] a)"></a>2.12 toArray(T[] a)</h3><p>方法名称： <T>T[] toArray(T[] a)</p><p>API中描述：返回一个包含此collection中所有元素的数组; 返回数组的运行时类型是指定数组的运行时类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建一个集合collection1</span></span><br><span class="line">        collection1.add(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;333&quot;</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;444&quot;</span>);</span><br><span class="line">        <span class="comment">//导出的是导出指定类型数组。toArray(T[] a)</span></span><br><span class="line">        String[] a =collection1.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));<span class="comment">//遍历a数组</span></span><br></pre></td></tr></table></figure><p> 打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=51027:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.Text1</span><br><span class="line">[<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-13-equals-Object-o-和hashCode"><a href="#2-13-equals-Object-o-和hashCode" class="headerlink" title="2.13 equals(Object o)和hashCode()"></a>2.13 equals(Object o)和hashCode()</h3><p>1、equals(Object o)</p><p>方法名称：public boolean equals(Object o)</p><p>API中描述：将指定对象与此集合进行比较以获得相等性。</p><p>2、hashCode()</p><p>方法名称：public int hashCode()</p><p>API中描述：回此集合的哈希码值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collection&lt;String&gt; collection2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection1.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        collection2.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//equals()方法和hashCode()方法</span></span><br><span class="line">        System.out.println(collection1.equals(collection2));<span class="comment">//比较两个集合</span></span><br><span class="line">        System.out.println(collection1.hashCode());<span class="comment">//返回哈希码值</span></span><br><span class="line">        System.out.println(collection2.hashCode());<span class="comment">//返回哈希码值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=60744:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.Text2</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">774920</span></span><br><span class="line"><span class="number">774920</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​       在这里我将equals(Object o)和hashCode()方法一起放这儿给大家解释，以便更好的理解。其实这两个方法都是一样的，在java中都是用来对比两个对象是否相等一致，那么他们两有什么区别呢？</p><pre><code>   equals()方法里面一般进行全面的比较，比较过程比较复杂，效率比较低。而hashCode()方法，返回值类型为int类型，返回的是哈希码值，所以比较的是哈希码值，效率比较高，但是hashCode()并不是完全可靠，有时候不同的对象他们生成的hashcode也会一样，所以hashCode()只能说是大部分时候是可靠的，并不是绝对可靠。</code></pre><p>   什么时候用equals()方法和hashCode()方法？</p><pre><code>   当我们进行大量的的对比时，如果单用equals()方法的话，效率太低，所以我们一般先拿hashCode()方法进行比较，如果返回的哈希码值不相等，那么这两个对象肯定不相同，就不需要再用equals()方法进行比较了，如果返回的哈希码值相等，那么再用equals()方法进行比较。如返回为true，那么这两个值绝对相等。这样效率就大大的提高了。</code></pre><h3 id="2-14-iterator"><a href="#2-14-iterator" class="headerlink" title="2.14 iterator()"></a>2.14 iterator()</h3><p>方法名称：public Iterator iterator()</p><p>API中描述：返回此集合中元素的迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; collection1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection1.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;张四&quot;</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;张五&quot;</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;张六&quot;</span>);</span><br><span class="line">        <span class="comment">//为 Iterator 接口实例化</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = collection1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;<span class="comment">//判断下一个是否有元素</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();<span class="comment">//每指向一个元素将他输出来</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk-11.0.6\bin\java.exe&quot;</span> <span class="string">&quot;-javaagent:E:\java IDEA\idea\ideaIU-2020.1.4.win\lib\idea_rt.jar=51581:E:\java IDEA\idea\ideaIU-2020.1.4.win\bin&quot;</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">&quot;E:\java IDEA\java\out\production\until&quot;</span> com.java.Demo3.Text2</span><br><span class="line">张三</span><br><span class="line">张四</span><br><span class="line">张五</span><br><span class="line">张六</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="3-Iterator迭代器"><a href="#3-Iterator迭代器" class="headerlink" title="3.Iterator迭代器"></a>3.Iterator迭代器</h2><h3 id="3-四大方法"><a href="#3-四大方法" class="headerlink" title="3.四大方法"></a>3.四大方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//询问是否有下一个元素，如果有返回true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回将要访问的下一个对象，如果已到达了集合末尾,返回异常NoSuchElementException</span></span><br><span class="line">E <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//删除的是上次访问的对象。这个方法必须紧跟访问一个元素之后。</span></span><br><span class="line"><span class="comment">//使用next让迭代器越过下一位元素，随后next返回越过的对象，remove删除的就是越过的那位元素</span></span><br><span class="line"><span class="comment">//记住：不能连续使用remove（）方法，他必须和next配合使用</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span></span><br><span class="line">   </span><br><span class="line">、</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEachRemaning</span><span class="params">(Consumer&lt;?<span class="built_in">super</span> E&gt; action)</span></span><br></pre></td></tr></table></figure><p>常用的是hasNext和next</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        coll.add(p1);</span><br><span class="line">        coll.add(<span class="number">128</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;尚硅谷&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line"><span class="comment">//        System.out.println(iterator.getClass());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());//如果超出了集合中元素的个数，会报NoSuchElementException异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; coll.size();i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式3：推荐</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="二-list和set"><a href="#二-list和set" class="headerlink" title="二.list和set"></a>二.list和set</h1><h2 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h2><h3 id="1-1常用方法"><a href="#1-1常用方法" class="headerlink" title="1.1常用方法"></a>1.1常用方法</h3><p>除了collection的15个方法之外，因为List是有序的，进而就有索引，进而就会增加一些针对索引操作的方法。</p><h4 id="1-1-1-插入元素"><a href="#1-1-1-插入元素" class="headerlink" title="1.1.1 插入元素"></a>1.1.1 插入元素</h4><ul><li>void add(int index, Object ele)&#96;:在index位置插入ele元素</li><li>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</li></ul><p>举例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">    list.add(<span class="number">1</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//addAll(int index, Collection eles)</span></span><br><span class="line">    <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    list.addAll(<span class="number">1</span>,list1);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[AA, CC, BB]</span><br><span class="line">[AA, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, CC, BB]</span><br></pre></td></tr></table></figure><h4 id="1-1-2-获取元素"><a href="#1-1-2-获取元素" class="headerlink" title="1.1.2  获取元素"></a>1.1.2  获取元素</h4><ul><li>Object get(int index)&#96;:获取指定index位置的元素</li><li>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testget</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">11</span>);</span><br><span class="line">    list.add(<span class="number">22</span>);</span><br><span class="line">    list.add(<span class="number">33</span>);</span><br><span class="line">    list.add(<span class="number">44</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> list.get(<span class="number">2</span>);</span><br><span class="line">    System.out.println(o);</span><br><span class="line"></span><br><span class="line">    <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> list.subList(<span class="number">0</span>, <span class="number">2</span>);   <span class="comment">//前闭后开</span></span><br><span class="line">    System.out.println(list1.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">33</span></span><br><span class="line">[<span class="number">11</span>, <span class="number">22</span>]</span><br></pre></td></tr></table></figure><h4 id="1-1-3-获取元素索引"><a href="#1-1-3-获取元素索引" class="headerlink" title="1.1.3 获取元素索引"></a>1.1.3 获取元素索引</h4><ul><li><p>int indexOf(Object obj):返回obj在集合中首次出现的位置</p></li><li><p>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testindex</span><span class="params">()</span>&#123;</span><br><span class="line">    List list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    list.add(<span class="number">111</span>);</span><br><span class="line">    list.add(<span class="number">222</span>);</span><br><span class="line">    list.add(<span class="number">333</span>);</span><br><span class="line">    list.add(<span class="number">444</span>);</span><br><span class="line">    list.add(<span class="number">222</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> list.indexOf(<span class="number">222</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastIndexOf</span> <span class="operator">=</span> list.lastIndexOf(<span class="number">222</span>);</span><br><span class="line">    System.out.println(first);</span><br><span class="line">    System.out.println(lastIndexOf);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-1-4-删除和替换元素"><a href="#1-1-4-删除和替换元素" class="headerlink" title="1.1.4 删除和替换元素"></a>1.1.4 删除和替换元素</h4><ul><li><p>Object remove(int index)&#96;:移除指定index位置的元素，并返回此元素</p></li><li><p>Object set(int index, Object ele)&#96;:设置指定index位置的元素为ele</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testremove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">111</span>);</span><br><span class="line">        list.add(<span class="number">222</span>);</span><br><span class="line">        list.add(<span class="number">333</span>);</span><br><span class="line">        list.add(<span class="number">444</span>);</span><br><span class="line">        list.add(<span class="number">222</span>);</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        list.set(<span class="number">1</span>,<span class="string">&quot;改变之后的&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">222</span>, 改变之后的, <span class="number">444</span>, <span class="number">222</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-ArrayList源码分析"><a href="#2-ArrayList源码分析" class="headerlink" title="2 ArrayList源码分析"></a>2 ArrayList源码分析</h3><h4 id="2-1-成员变量"><a href="#2-1-成员变量" class="headerlink" title="2.1 成员变量"></a>2.1 成员变量</h4><p><img src="/%5Cimg%5Carraylist1.png" alt="image-20230427192118259"></p><p><img src="/..%5Cimg%5Carraylist1.png"></p><p><em>DEFAULT_CAPACITY</em> &#x3D; 10;  默认初始的容量(CAPACITY)，</p><p><em>EMPTY_ELEMENTDATA</em> &#x3D; {}; 用于空实例的共享空数组实例，见构造函数与下面的不同 </p><p><em>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</em> &#x3D; {};用于默认大小的空实例的共享空数组实例，见无参构造函数</p><p>Object[] elementData;  存储元素的数组缓冲区，真正存储数据的数组</p><p>int size;     ArrayList的大小（它包含的元素数量）</p><h4 id="2-2-构造方法"><a href="#2-2-构造方法" class="headerlink" title="2.2 构造方法"></a>2.2 构造方法</h4><p><img src="/%5Cimg%5Carraylist2.png" alt="image-20230427192154014"></p><p><img src="/..%5Cimg%5Carraylist2.png" alt="image-20230427192154014"></p><ul><li><p>第一个构造是带初始化容量的构造函数，可以按照指定的容量初始化数组</p></li><li><p>第二个是无参构造函数，默认创建一个空集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = a.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class="line">            elementData = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            elementData = Arrays.copyOf(a, size, Object[].class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个是将collection对象转换成数组，然后将数组的地址的赋给elementData</p></li></ul><h4 id="2-3-添加数据流程"><a href="#2-3-添加数据流程" class="headerlink" title="2.3 添加数据流程"></a>2.3 添加数据流程</h4><p><img src="/%5Cimg%5Carraylist3.png" alt="image-20230427192644244"></p><p><img src="/..%5Cimg%5Carraylist3.png" alt="image-20230427192644244"></p><p><strong>结论：</strong></p><ul><li>底层数据结构</li></ul><p>ArrayList底层是用动态的数组实现的</p><ul><li>初始容量</li></ul><p>ArrayList初始容量为0，当第一次添加数据的时候才会初始化容量为10</p><ul><li>扩容逻辑</li></ul><p>ArrayList在进行扩容的时候是原来容量的1.5倍，每次扩容都需要拷贝数组</p><ul><li><p>添加逻辑</p><ul><li><p>确保数组已使用长度（size）加1之后足够存下下一个数据 </p></li><li><p>计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）</p></li><li><p>确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。</p></li><li><p>返回添加成功布尔值。</p></li></ul></li></ul><h4 id="2-4-集合与数组互转"><a href="#2-4-集合与数组互转" class="headerlink" title="2.4 集合与数组互转"></a>2.4 集合与数组互转</h4><blockquote><p>数组转List受影响</p><p>List转数组不受影响</p></blockquote><p>再答：</p><p>1，用Arrays.asList转List后，如果修改了数组内容，list受影响吗</p><p>Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址</p><p>2，List用toArray转数组后，如果修改了List内容，数组受影响吗</p><p>list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响</p><h3 id="3-LinkedList"><a href="#3-LinkedList" class="headerlink" title="3.LinkedList"></a>3.LinkedList</h3><h4 id="3-1arrarylist与linkedlist的区别"><a href="#3-1arrarylist与linkedlist的区别" class="headerlink" title="3.1arrarylist与linkedlist的区别"></a>3.1arrarylist与linkedlist的区别</h4><ul><li><p>底层数据结构</p><ul><li><p>ArrayList 是动态数组的数据结构实现</p></li><li><p>LinkedList 是双向链表的数据结构实现</p></li></ul></li><li><p>操作数据效率</p><ul><li>ArrayList按照下标查询的时间复杂度O(1)【内存是连续的，根据寻址公式】， LinkedList不支持下标查询</li><li>查找（未知索引）： ArrayList需要遍历，链表也需要链表，时间复杂度都是O(n)</li><li>新增和删除<ul><li>ArrayList尾部插入和删除，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)</li><li>LinkedList头尾节点增删时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)</li></ul></li></ul></li><li><p>内存空间占用</p><ul><li><p>ArrayList底层是数组，内存连续，节省内存</p></li><li><p>LinkedList 是双向链表需要存储数据，和两个指针，更占用内存</p></li></ul></li><li><p>线程安全</p><ul><li>ArrayList和LinkedList都不是线程安全的</li><li>如果需要保证线程安全，有两种方案：<ul><li>在方法内使用，局部变量则是线程安全的</li><li>使用线程安全的ArrayList和LinkedList</li></ul></li></ul></li></ul><h2 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">1. Set及其实现类特点</span><br><span class="line">java.util.Collection:存储一个一个的数据</span><br><span class="line">    |-----子接口：Set:存储无序的、不可重复的数据(高中学习的集合)</span><br><span class="line">           |---- HashSet：主要实现类；底层使用的是HashMap，即使用数组+单向链表+红黑树结构进行存储。（jdk8中）</span><br><span class="line">                |---- LinkedHashSet：是HashSet的子类；在现有的数组+单向链表+红黑树结构的基础上，又添加了</span><br><span class="line">                                     一组双向链表，用于记录添加元素的先后顺序。即：我们可以按照添加元素的顺序</span><br><span class="line">                                     实现遍历。便于频繁的查询操作。</span><br><span class="line">           |---- TreeSet：底层使用红黑树存储。可以按照添加的元素的指定的属性的大小顺序进行遍历。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 开发中的使用频率及场景：</span><br><span class="line">&gt; 较List、Map来说，Set使用的频率比较少。</span><br><span class="line">&gt; 用来过滤重复数据</span><br><span class="line"></span><br><span class="line">3. Set中常用方法：即为Collection中声明的15个抽象方法。没有新增的方法。</span><br><span class="line"></span><br><span class="line">4. Set中无序性、不可重复性的理解（以HashSet及其子类为例说明）</span><br><span class="line"></span><br><span class="line">&gt;无序性： != 随机性。</span><br><span class="line">         添加元素的顺序和遍历元素的顺序不一致,是不是就是无序性呢？ No!</span><br><span class="line">         到底什么是无序性？与添加的元素的位置有关，不像ArrayList一样是依次紧密排列的。</span><br><span class="line">         这里是根据添加的元素的哈希值，计算的其在数组中的存储位置。此位置不是依次排列的，表现为无序性。</span><br><span class="line"></span><br><span class="line">&gt;不可重复性：添加到Set中的元素是不能相同的。</span><br><span class="line">          比较的标准，需要判断hashCode()得到的哈希值以及equals()得到的boolean型的结果。</span><br><span class="line">          哈希值相同且equals()返回true，则认为元素是相同的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 添加到HashSet/LinkedHashSet中元素的要求:</span><br><span class="line">  要求元素所在的类要重写两个方法：equals() 和 hashCode()。</span><br><span class="line">  同时，要求equals() 和 hashCode()要保持一致性！我们只需要在IDEA中自动生成两个方法的重写即可，即能保证两个方法的一致性。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. TreeSet的使用</span><br><span class="line">6.1 底层的数据结构：红黑树</span><br><span class="line"></span><br><span class="line">6.2 添加数据后的特点：可以按照添加的元素的指定的属性的大小顺序进行遍历。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6.3 向TreeSet中添加的元素的要求：</span><br><span class="line">&gt; 要求添加到TreeSet中的元素必须是同一个类型的对象，否则会报ClassCastException.</span><br><span class="line">&gt; 添加的元素需要考虑排序：① 自然排序 ② 定制排序</span><br><span class="line"></span><br><span class="line">6.4 判断数据是否相同的标准</span><br><span class="line">&gt; 不再是考虑hashCode()和equals()方法了，也就意味着添加到TreeSet中的元素所在的类不需要重写hashCode()和equals()方法了</span><br><span class="line">&gt; 比较元素大小的或比较元素是否相等的标准就是考虑自然排序或定制排序中，compareTo()或compare()的返回值。</span><br><span class="line">  如果compareTo()或compare()的返回值为0，则认为两个对象是相等的。由于TreeSet中不能存放相同的元素，则</span><br><span class="line">  后一个相等的元素就不能添加到TreeSet中。</span><br></pre></td></tr></table></figure><h1 id="三-双列集合"><a href="#三-双列集合" class="headerlink" title="三.双列集合"></a>三.双列集合</h1><h2 id="1-树的介绍"><a href="#1-树的介绍" class="headerlink" title="1 树的介绍"></a>1 树的介绍</h2><h4 id="2-1-二叉树概述"><a href="#2-1-二叉树概述" class="headerlink" title="2.1 二叉树概述"></a>2.1 二叉树概述</h4><p>二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。</p><p>二叉树每个节点的左子树和右子树也分别满足二叉树的定义。</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428194831426.png" alt="image-20230428194831426"></p><p>Java中有两个方式实现二叉树：数组存储，链式存储。</p><p>基于链式存储的树的节点可定义如下：</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428194904383.png" alt="image-20230428194904383"></p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428194931132.png" alt="image-20230428194931132"></p><h4 id="2-2-二叉搜索树"><a href="#2-2-二叉搜索树" class="headerlink" title="2.2 二叉搜索树"></a>2.2 二叉搜索树</h4><p>在二叉树中，比较常见的二叉树有：</p><ul><li><p>满二叉树</p></li><li><p>完全二叉树</p></li><li><p><strong>二叉搜索树</strong></p></li><li><p><strong>红黑树</strong></p></li></ul><p>我们重点讲解二叉搜索树和红黑树</p><p>（1）二叉搜索树概述</p><p>二叉搜索树(Binary Search Tree,BST)又名二叉查找树，有序二叉树或者排序二叉树，是二叉树中比较常用的一种类型</p><p>二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428195206422.png" alt="image-20230428195206422"></p><p>（2）二叉搜索树-时间复杂度分析</p><p>实际上由于二叉查找树的形态各异，时间复杂度也不尽相同，我画了几棵树我们来看一下插入，查找，删除的时间复杂度</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428195341917.png" alt="image-20230428195341917"></p><p>插入，查找，删除的时间复杂度<strong>O(logn)</strong></p><p>极端情况下二叉搜索的时间复杂度</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428195449799.png" alt="image-20230428195449799"></p><p>对于图中这种情况属于最坏的情况，二叉查找树已经退化成了链表，左右子树极度不平衡，此时查找的时间复杂度肯定是O(n)。</p><h4 id="2-3-红黑树"><a href="#2-3-红黑树" class="headerlink" title="2.3 红黑树"></a>2.3 红黑树</h4><p>（1）概述</p><p><strong>红黑树（Red Black Tree）</strong>：也是一种自平衡的二叉搜索树(BST)，之前叫做平衡二叉B树（Symmetric Binary B-Tree）</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428195832724.png" alt="image-20230428195832724"></p><p>（2）红黑树的特质</p><p>性质1：节点要么是<strong>红色</strong>,要么是<strong>黑色</strong></p><p>性质2：根节点是<strong>黑色</strong></p><p>性质3：叶子节点都是黑色的空节点</p><p>性质4：红黑树中红色节点的子节点都是黑色</p><p>性质5：从任一节点到叶子节点的所有路径都包含相同数目的黑色节点</p><p><strong>在添加或删除节点的时候，如果不符合这些性质会发生旋转，以达到所有的性质，保证红黑树的平衡</strong></p><p>（3）红黑树的复杂度</p><ul><li><p>查找：</p><ul><li>红黑树也是一棵BST（二叉搜索树）树，查找操作的时间复杂度为：O(log n)</li></ul></li><li><p>添加：</p><ul><li>添加先要从根节点开始找到元素添加的位置，时间复杂度O(log n)</li><li>添加完成后涉及到复杂度为O(1)的旋转调整操作</li><li>故整体复杂度为：O(log n)</li></ul></li><li><p>删除：</p><ul><li>首先从根节点开始找到被删除元素的位置，时间复杂度O(log n)</li><li>删除完成后涉及到复杂度为O(1)的旋转调整操作</li><li>故整体复杂度为：O(log n)</li></ul></li></ul><h2 id="2-散列表的介绍"><a href="#2-散列表的介绍" class="headerlink" title="2.散列表的介绍"></a>2.散列表的介绍</h2><p>在HashMap中的最重要的一个数据结构就是散列表，在散列表中又使用到了红黑树和链表</p><h4 id="3-1-散列表（Hash-Table）概述"><a href="#3-1-散列表（Hash-Table）概述" class="headerlink" title="3.1 散列表（Hash Table）概述"></a>3.1 散列表（Hash Table）概述</h4><p>散列表(Hash Table)又名哈希表&#x2F;Hash表，是根据键（Key）直接访问在内存存储位置值（Value）的数据结构，它是由数组演化而来的，利用了数组支持按照下标进行随机访问数据的特性</p><p>举个例子：</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428200919454.png" alt="image-20230428200919454"></p><p>假设有100个人参加马拉松，编号是1-100，如果要编程实现根据选手的编号迅速找到选手信息？</p><p>可以把选手信息存入数组中，选手编号就是数组的下标，数组的元素就是选手的信息。</p><p>当我们查询选手信息的时候，只需要根据选手的编号到数组中查询对应的元素就可以快速找到选手的信息，如下图：</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428201000814.png" alt="image-20230428201000814"></p><p>现在需求升级了：</p><p>假设有100个人参加马拉松，不采用1-100的自然数对选手进行编号，编号有一定的规则比如：2023ZHBJ001，其中2023代表年份，ZH代表中国，BJ代表北京，001代表原来的编号，那此时的编号2023ZHBJ001不能直接作为数组的下标，此时应该如何实现呢？</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428201321607.png" alt="image-20230428201321607"></p><p>我们目前是把选手的信息存入到数组中，不过选手的编号不能直接作为数组的下标，不过，可以把选手的选号进行转换，转换为数值就可以继续作为数组的下标了？</p><p>转换可以使用散列函数进行转换</p><h4 id="3-2-散列函数和散列冲突"><a href="#3-2-散列函数和散列冲突" class="headerlink" title="3.2 散列函数和散列冲突"></a>3.2 散列函数和散列冲突</h4><p>将键(key)映射为数组下标的函数叫做散列函数。可以表示为：hashValue &#x3D; hash(key)</p><p>散列函数的基本要求：</p><ul><li><p>散列函数计算得到的散列值必须是大于等于0的正整数，因为hashValue需要作为数组的下标。</p></li><li><p>如果key1&#x3D;&#x3D;key2，那么经过hash后得到的哈希值也必相同即：hash(key1) &#x3D;&#x3D; hash(key2）</p></li><li><p><strong>如果key1 !&#x3D; key2，那么经过hash后得到的哈希值也必不相同即：hash(key1) !&#x3D; hash(key2)</strong></p></li></ul><p>实际的情况下想找一个散列函数能够做到对于不同的key计算得到的散列值都不同几乎是不可能的，即便像著名的MD5,SHA等哈希算法也无法避免这一情况，这就是散列冲突(或者哈希冲突，哈希碰撞，<strong>就是指多个key映射到同一个数组下标位置</strong>)</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428203219225.png" alt="image-20230428203219225"></p><h4 id="3-3-散列冲突-链表法（拉链）"><a href="#3-3-散列冲突-链表法（拉链）" class="headerlink" title="3.3 散列冲突-链表法（拉链）"></a>3.3 散列冲突-链表法（拉链）</h4><p>在散列表中，数组的每个下标位置我们可以称之为桶（bucket）或者槽（slot），每个桶(槽)会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428203437910.png" alt="image-20230428203437910"></p><p>简单就是，如果有多个key最终的hash值是一样的，就会存入数组的同一个下标中，下标中挂一个链表存入多个数据</p><h4 id="3-4-时间复杂度-散列表"><a href="#3-4-时间复杂度-散列表" class="headerlink" title="3.4 时间复杂度-散列表"></a>3.4 时间复杂度-散列表</h4><p>1，插入操作，通过散列函数计算出对应的散列槽位，将其插入到对应链表中即可，插入的时间复杂度是 O(1)</p><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428203711269.png" alt="image-20230428203711269"></p><blockquote><p>通过计算就可以找到元素</p></blockquote><p>2，当查找、删除一个元素时，我们同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除</p><ul><li><p>平均情况下基于链表法解决冲突时查询的时间复杂度是O(1)</p></li><li><p>散列表可能会退化为链表,查询的时间复杂度就从 O(1) 退化为 O(n)</p></li></ul><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428203858903.png" alt="image-20230428203858903"></p><ul><li>将链表法中的链表改造为其他高效的动态数据结构，比如红黑树，查询的时间复杂度是 O(logn)</li></ul><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428203924816.png" alt="image-20230428203924816"></p><p>将链表法中的链表改造红黑树还有一个非常重要的原因，可以防止DDos攻击</p><blockquote><p>DDos 攻击:</p><p>分布式拒绝服务攻击(英文意思是Distributed Denial of Service，简称DDoS）</p><p>指处于不同位置的多个攻击者同时向一个或数个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器并利用这些机器对受害者同时实施攻击。由于攻击的发出点是分布在不同地方的，这类攻击称为分布式拒绝服务攻击，其中的攻击者可以有多个</p></blockquote><h2 id="3-Map"><a href="#3-Map" class="headerlink" title="3.Map"></a>3.Map</h2><h3 id="3-1-Hashmap底层原理"><a href="#3-1-Hashmap底层原理" class="headerlink" title="3.1 Hashmap底层原理"></a>3.1 Hashmap底层原理</h3><p>HashMap的数据结构： 底层使用hash表数据结构，即数组和链表或红黑树</p><ol><li><p>当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标 </p></li><li><p>存储时，如果出现hash值相同的key，此时有两种情况。</p></li></ol><p>  a. 如果key相同，则覆盖原始值；</p><p>  b. 如果key不同（出现冲突），则将当前的key-value放入链表或红黑树中 </p><ol start="3"><li>获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。</li></ol><p><img src="E:\javaProjects\面试\07-常见集合篇\讲义\Java集合相关面试题.assets\image-20230428204902016.png" alt="image-20230428204902016"></p><p>面试官追问：HashMap的jdk1.7和jdk1.8有什么区别</p><ul><li><p>JDK1.8之前采用的是拉链法。拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p></li><li><p>jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8） 时并且数组长度达到64时，将链表转化为红黑树，以减少搜索时间。扩容 resize( ) 时，红黑树拆分成的树的结点数小于等于临界值6个，则退化成链表</p></li></ul><h3 id="3-2Map中常用的方法"><a href="#3-2Map中常用的方法" class="headerlink" title="3.2Map中常用的方法"></a>3.2Map中常用的方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 添加、修改操作：</span><br><span class="line">  - Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span><br><span class="line">  - </span><br><span class="line">- </span><br><span class="line">  - </span><br><span class="line">  - void clear()：清空当前map中的所有数据</span><br><span class="line">- 元素查询的操作：</span><br><span class="line">  - Object get(Object key)：获取指定key对应的value</span><br><span class="line">  - boolean containsKey(Object key)：是否包含指定的key</span><br><span class="line">  - boolean containsValue(Object value)：是否包含指定的value</span><br><span class="line">  - int size()：返回map中key-value对的个数</span><br><span class="line">  - boolean isEmpty()：判断当前map是否为空</span><br><span class="line">  - boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span><br><span class="line">- 元视图操作的方法：</span><br><span class="line">  - Set keySet()：返回所有key构成的Set集合</span><br><span class="line">  - Collection values()：返回所有value构成的Collection集合</span><br><span class="line">  - Set entrySet()：返回所有key-value对构成的Set集合</span><br></pre></td></tr></table></figure><h4 id="3-2-1-添加、修改操作："><a href="#3-2-1-添加、修改操作：" class="headerlink" title="3.2.1 添加、修改操作："></a>3.2.1 添加、修改操作：</h4><ul><li>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</li><li>void putAll(Map m):将m中的所有key-value对存放到当前map中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;CC&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        map1.put(<span class="number">34</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        System.out.println(map1);</span><br><span class="line"></span><br><span class="line">        Map map2=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map2.put(<span class="string">&quot;map2key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;map2key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map1.putAll(map2);</span><br><span class="line">        System.out.println(map1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="literal">null</span>=<span class="literal">null</span>, CC=Thu Jun <span class="number">29</span> <span class="number">16</span>:<span class="number">54</span>:<span class="number">22</span> CST <span class="number">2023</span>, <span class="number">34</span>=AA, Tom=<span class="number">23</span>&#125;</span><br><span class="line">&#123;<span class="literal">null</span>=<span class="literal">null</span>, CC=Thu Jun <span class="number">29</span> <span class="number">16</span>:<span class="number">54</span>:<span class="number">22</span> CST <span class="number">2023</span>, <span class="number">34</span>=AA, Tom=<span class="number">23</span>, map2key1=value1, map2key2=value2&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-删除操作："><a href="#3-2-2-删除操作：" class="headerlink" title="3.2.2 删除操作："></a>3.2.2 删除操作：</h4><ul><li>Object remove(Object key)：移除指定key的key-value对，并返回value</li><li>void clear()：清空当前map中的所有数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CC&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        map.put(<span class="number">34</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">removeValue</span> <span class="operator">=</span> map.remove(<span class="number">34</span>);</span><br><span class="line">        System.out.println(removeValue);</span><br><span class="line"></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AA</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-元素查询的操作："><a href="#3-2-3-元素查询的操作：" class="headerlink" title="3.2.3 元素查询的操作："></a>3.2.3 元素查询的操作：</h4><ul><li>Object get(Object key)：获取指定key对应的value<ul><li>boolean containsKey(Object key)：是否包含指定的key</li><li>boolean containsValue(Object value)：是否包含指定的value</li><li>int size()：返回map中key-value对的个数</li><li>boolean isEmpty()：判断当前map是否为空</li><li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CC&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        map.put(<span class="number">34</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> map.get(<span class="number">34</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> map.containsKey(<span class="number">34</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> map.containsValue(<span class="number">23</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> map.size();</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> map.isEmpty();</span><br><span class="line">        System.out.println(empty);</span><br><span class="line"></span><br><span class="line">        Map map1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">equals</span> <span class="operator">=</span> map.equals(map1);</span><br><span class="line">        System.out.println(equals);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AA</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-4元视图操作的方法："><a href="#3-2-4元视图操作的方法：" class="headerlink" title="3.2.4元视图操作的方法："></a>3.2.4元视图操作的方法：</h4><ul><li>Set keySet()：返回所有key构成的Set集合</li><li>Collection values()：返回所有value构成的Collection集合</li><li>Set entrySet()：返回所有key-value对构成的Set集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        map.put(<span class="string">&quot;CC&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        map.put(<span class="number">34</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">        System.out.println(values);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        System.out.println(set1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;CC=Thu Jun <span class="number">29</span> <span class="number">17</span>:<span class="number">04</span>:<span class="number">31</span> CST <span class="number">2023</span>, <span class="number">34</span>=AA, Tom=<span class="number">23</span>&#125;</span><br><span class="line">[CC, <span class="number">34</span>, Tom]</span><br><span class="line">[Thu Jun <span class="number">29</span> <span class="number">17</span>:<span class="number">04</span>:<span class="number">31</span> CST <span class="number">2023</span>, AA, <span class="number">23</span>]</span><br><span class="line">[CC=Thu Jun <span class="number">29</span> <span class="number">17</span>:<span class="number">04</span>:<span class="number">31</span> CST <span class="number">2023</span>, <span class="number">34</span>=AA, Tom=<span class="number">23</span>]</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring总结</title>
      <link href="/post/263d971e.html"/>
      <url>/post/263d971e.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-Spring是如何创建对象的呢？原理是什么？"><a href="#1-Spring是如何创建对象的呢？原理是什么？" class="headerlink" title="1. Spring是如何创建对象的呢？原理是什么？"></a>1. Spring是如何创建对象的呢？原理是什么？</h4><p>dom4j解析beans.xml文件，从中获取class属性值，类的全类名。通过反射机制调用无参数构造方法创建对象。</p><p>bean对象最终存储在spring容器中，在spring源码底层就是一个map集合，存储bean的map在<strong>DefaultListableBeanFactory</strong>类中。</p><p>Spring容器加载到Bean类时 , 会把这个类的描述信息, 以包名加类名的方式存到beanDefinitionMap 中,<br>Map&lt;String,BeanDefinition&gt; , 其中 String是Key , 默认是类名首字母小写 , BeanDefinition , 存的是类的定义(描述信息) , 我们通常叫BeanDefinition接口为 : bean的定义对象。</p><ul><li><p>流程：</p><p><img src="/../img/spring10.png" alt="img"></p><p><img src="/img/spring10.png" alt="img"></p></li></ul><h4 id="2-IOC容器"><a href="#2-IOC容器" class="headerlink" title="2.IOC容器"></a>2.IOC容器</h4><p>Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。</p><h5 id="2-1-控制反转"><a href="#2-1-控制反转" class="headerlink" title="2.1 控制反转"></a>2.1 控制反转</h5><ol><li><p>控制反转是一种思想。</p></li><li><p>控制反转是为了降低程序耦合度，提高程序扩展力。</p></li><li><p>控制反转，反转的是什么？</p></li></ol><p>将对象的创建权利交出去，交给第三方容器负责。</p><p>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</p><ol start="4"><li>控制反转这种思想如何实现呢？</li></ol><p>DI（Dependency Injection）：依赖注入</p><h5 id="2-2-依赖注入"><a href="#2-2-依赖注入" class="headerlink" title="2.2 依赖注入"></a>2.2 依赖注入</h5><p><strong>依赖注入：</strong></p><ul><li><strong>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li></ul><p>依赖注入常见的实现方式包括两种：</p><ul><li>第一种：set注入：都是在xm里面用标签实现</li><li>第二种：构造注入：在xml里面使用标签实现</li></ul><p>所以结论是：<strong>IOC 就是一种控制反转的思想， 而 DI 是对IoC的一种具体实现。</strong></p><h5 id="2-3-基于xml管理bean"><a href="#2-3-基于xml管理bean" class="headerlink" title="2.3 基于xml管理bean"></a>2.3 基于xml管理bean</h5><ol><li><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p><blockquote><p>可以，前提是bean唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为bean不唯一</p></blockquote><p><strong>结论</strong></p><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p></li><li><p>bean也有作用域</p><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在IOC容器中，这个bean的对象始终为单实例</td><td>IOC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table></li><li><p>bean的生命周期</p><p><strong>①具体的生命周期过程</strong></p><ul><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性</li><li>bean的后置处理器（初始化之前）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean的后置处理器（初始化之后）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ul></li><li><p>自动装配</p><p>后续会使用@Autowire</p><p>在mvc中，在xml提前配置service的类，controller就可以直接使用。</p><p>package com.atguigu.spring6.autowire.controller<br>public class UserController {</p><pre><code>private UserService userService;public void setUserService(UserService userService) &#123;    this.userService = userService;&#125;public void saveUser()&#123;    userService.saveUser();&#125;</code></pre><p>}</p><p>在xml配置bean时：</p><p><strong>②配置bean</strong></p><blockquote><p>使用bean标签的autowire属性设置自动装配效果</p><p>自动装配方式：byType</p><p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p><p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值null</p><p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>自动装配方式：byName</p><p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="2-4基于注解管理bean"><a href="#2-4基于注解管理bean" class="headerlink" title="2.4基于注解管理bean"></a>2.4基于注解管理bean</h5><p>1.在xml里面开启组件扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">    http://www.springframework.org/schema/context</span><br><span class="line">            http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--开启组件扫描功能--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.atguigu.spring6&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>2.注解</p><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。  使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><p>3.@Autowired注解</p><p>3.1 单独使用@Autowired注解，<strong>默认根据类型装配</strong>。【默认是byType】</p><p>3.2 源码中有两处需要注意：</p><ul><li><p>第一处：该注解可以标注在哪里？</p></li><li><ul><li><p>构造方法上</p></li><li><p>方法上</p></li><li><p>形参上</p></li><li><p>属性上：最常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private UserService userservice;</span><br></pre></td></tr></table></figure></li><li><p>注解上</p></li></ul></li><li><p>第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p></li></ul><p>3.3 @Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li><li>@Autowired注解是Spring框架自己的。</li><li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</strong></li><li><strong>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul><p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】</p><ol start="4"><li><p>全注解开发</p><p>用配置类代替xml配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.spring6.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">//@ComponentScan(&#123;&quot;com.atguigu.spring6.controller&quot;, &quot;com.atguigu.spring6.service&quot;,&quot;com.atguigu.spring6.dao&quot;&#125;)</span><br><span class="line">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span><br><span class="line">public class Spring6Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-面向切面：AOP"><a href="#3-面向切面：AOP" class="headerlink" title="3.面向切面：AOP"></a>3.面向切面：AOP</h4><pre><code>##### 3.1代理模式 </code></pre><p>​<strong>①介绍</strong></p><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><p><img src="/../img/spring1.png" alt="images"></p><p><img src="/img/spring1.png" alt="images"></p><p>使用代理后：</p><p><img src="/%5Cimg%5Cspring2.png" alt="images"></p><p><img src="/..%5Cimg%5Cspring2.png" alt="images"></p><p><strong>②生活中的代理</strong></p><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li></ul><p><strong>③相关术语</strong></p><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h5 id="3-2-基于注解的AOP"><a href="#3-2-基于注解的AOP" class="headerlink" title="3.2  基于注解的AOP"></a>3.2  基于注解的AOP</h5><p>  基于注解的AOP的实现：<br>        1、将目标对象和切面交给IOC容器管理（注解+扫描）<br>        2、开启AspectJ的自动代理，为目标对象自动生成代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;com.atguigu.aop.annotation&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">   &lt;aop:aspectj-autoproxy /&gt;</span><br></pre></td></tr></table></figure><p>​        3、将切面类通过注解@Aspect标识</p><p>​需要创建接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface Calculator &#123;&#125;</span><br></pre></td></tr></table></figure><p>​然后创建实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class CalculatorImpl implements Calculator&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int add(int i, int j) &#123;</span><br><span class="line"></span><br><span class="line">        int result = i + j;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;方法内部 result = &quot; + result);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<strong>创建切面类</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Component  //ioc容器</span><br><span class="line">@Aspect  //切面类</span><br><span class="line">public class LogAspect &#123;</span><br><span class="line">@Before(value = &quot;pointCut()&quot;)</span><br><span class="line">    public void beforeMethod(JoinPoint joinPoint)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">     // 返回  @AfterReturning</span><br><span class="line">    @AfterReturning(value = &quot;com.atguigu.spring6.aop.annoaop.LogAspect.pointCut()&quot;, returning = &quot;result&quot;)</span><br><span class="line">    public void afterReturningMethod(JoinPoint joinPoint, Object result)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">        //重用切入点表达式，确认切点</span><br><span class="line">    @Pointcut(value = &quot;execution(public int com.atguigu.spring6.aop.annoaop.CalculatorImpl.*(..))&quot;)</span><br><span class="line">    public void pointCut()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><blockquote><p>各种通知的执行顺序：</p><ul><li>Spring版本5.3.x以前：<ul><li>前置通知</li><li>目标操作</li><li>后置通知</li><li>返回通知或异常通知</li></ul></li><li>Spring版本5.3.x以后：<ul><li>前置通知</li><li>目标操作</li><li>返回通知或异常通知</li><li>后置通知</li></ul></li></ul></blockquote><h3 id="3-3-日志实现"><a href="#3-3-日志实现" class="headerlink" title="3.3 日志实现"></a>3.3 日志实现</h3><h4 id="1-加一个注解"><a href="#1-加一个注解" class="headerlink" title="1.加一个注解"></a>1.加一个注解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface SystemLog &#123;</span><br><span class="line">    String businessName();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建切面类"><a href="#2-创建切面类" class="headerlink" title="2.创建切面类"></a>2.创建切面类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">@Slf4j</span><br><span class="line">public class LogAspect &#123;</span><br><span class="line"></span><br><span class="line">    //确定切点</span><br><span class="line">    @Pointcut(&quot;@annotation(com.hjh.annotation.SystemLog)&quot;)   //使用SystemLog注解切入</span><br><span class="line">    public void pt()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //通知方法</span><br><span class="line">    @Around(&quot;pt()&quot;)</span><br><span class="line">    public  Object printLog(ProceedingJoinPoint joinPoint) throws Throwable &#123;   //joinPoint当前方法的调用</span><br><span class="line">        Object ret = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            HanderBefore(joinPoint);</span><br><span class="line">            ret = joinPoint.proceed();//相当于目标方法的调用</span><br><span class="line">            HanderAfter(ret);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 结束后换行</span><br><span class="line">            log.info(&quot;=======End=======&quot; + System.lineSeparator());  //System.lineSeparator()系统的换行符，windows和linux不同</span><br><span class="line">        &#125;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void HanderBefore(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line"></span><br><span class="line">        //获取被增强方法上的注解对象</span><br><span class="line">        SystemLog systemLog=getSystemLog(joinPoint);</span><br><span class="line"></span><br><span class="line">        log.info(&quot;=======Start=======&quot;);</span><br><span class="line">        // 打印请求 URL</span><br><span class="line">        log.info(&quot;URL            : &#123;&#125;&quot;,request.getRequestURL());</span><br><span class="line">        // 打印描述信息</span><br><span class="line">        log.info(&quot;BusinessName   : &#123;&#125;&quot;, systemLog.businessName());</span><br><span class="line">        // 打印 Http method</span><br><span class="line">        log.info(&quot;HTTP Method    : &#123;&#125;&quot;, request.getMethod());</span><br><span class="line">        // 打印调用 controller 的全路径以及执行方法</span><br><span class="line">        log.info(&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;,joinPoint.getSignature().getDeclaringTypeName(),joinPoint.getSignature().getName() );</span><br><span class="line">        // 打印请求的 IP</span><br><span class="line">        log.info(&quot;IP             : &#123;&#125;&quot;,request.getRemoteHost());</span><br><span class="line">        // 打印请求入参</span><br><span class="line">        log.info(&quot;Request Args   : &#123;&#125;&quot;, JSON.toJSON(joinPoint.getArgs()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private SystemLog getSystemLog(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();  //相当于把增强的方法那一堆封装成了signature</span><br><span class="line">        SystemLog systemLog = signature.getMethod().getAnnotation(SystemLog.class);</span><br><span class="line">        return systemLog;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void HanderAfter(Object ret) &#123;</span><br><span class="line">        // 打印出参</span><br><span class="line">        log.info(&quot;Response       : &#123;&#125;&quot;,JSON.toJSON(ret) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在需要打印日志的方法加上注解"><a href="#3-在需要打印日志的方法加上注解" class="headerlink" title="3.在需要打印日志的方法加上注解"></a>3.在需要打印日志的方法加上注解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;hotArticleList&quot;)</span><br><span class="line">@SystemLog(businessName = &quot;获取热点文章列表&quot;)</span><br><span class="line">public ResponseResult hotArticleList()&#123;</span><br><span class="line">    ResponseResult result=articleService.hotArticleList();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习总结</title>
      <link href="/post/bec98339.html"/>
      <url>/post/bec98339.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-安装"><a href="#一-安装" class="headerlink" title="一.安装"></a>一.安装</h2><h3 id="1-centos安装docker"><a href="#1-centos安装docker" class="headerlink" title="1.centos安装docker"></a>1.centos安装docker</h3><ul><li><p>安装gcc相关的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>安装所需要的软件包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>设置stable镜像仓库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http:<span class="comment">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>更新yum软件包索引，便于后续下载更快</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装docker ce</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker并执行hello world案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-配置阿里云镜像加速器"><a href="#2-配置阿里云镜像加速器" class="headerlink" title="2.配置阿里云镜像加速器"></a>2.配置阿里云镜像加速器</h3><p><img src="/../img/d1.png" alt="image-20230625132324589"></p><p><img src="/img/d1.png" alt="image-20230625132324589"></p><h2 id="二-docker常用命令"><a href="#二-docker常用命令" class="headerlink" title="二.docker常用命令"></a>二.docker常用命令</h2><h3 id="1-帮助启动类命令"><a href="#1-帮助启动类命令" class="headerlink" title="1.帮助启动类命令"></a>1.帮助启动类命令</h3><p><img src="/../img/d2.png" alt="image-20230625134249590"></p><p><img src="/img/d2.png" alt="image-20230625134249590"></p><h3 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h3><p><img src="/../img/d3.png" alt="image-20230625140750333"></p><p><img src="/img/d3.png" alt="image-20230625140750333"></p><h3 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h3><p>1.新建+启动容器</p><p>docker run -it centos &#x2F;bin&#x2F;bash      </p><p>2.列出当前正在运行的容器</p><p>docker ps                        docker ps -a   列出历史容器</p><p>3.退出容器</p><p>exit   —-&gt; run进去，exit退出，容器停止</p><p>ctrl+p+q    —-&gt;run进去，ctrl+p+q退出，容器不停止</p><p>4.重启容器</p><p>docker restart mysql</p><p>5.删除容器</p><p>docker rm mysql</p><p>docker rm -f mysql 强制删除</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring security总结</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-两大重要接口"><a href="#一-两大重要接口" class="headerlink" title="一.两大重要接口"></a>一.两大重要接口</h3><p>实现用户认证：UserDetailService</p><p>1.创建一个类继承UsernamePasswordAuthenticationFilter，重写3个方法</p><p>2.创建类实现UserDetailService，编写查询数据过程，返回User对象，这个User对象是安全框架提供的对象。</p><p>对密码进行加密：PasswordEncoder</p><h2 id="二-设置登录用户名和密码"><a href="#二-设置登录用户名和密码" class="headerlink" title="二.设置登录用户名和密码"></a>二.设置登录用户名和密码</h2><h3 id="1-使用配置文件"><a href="#1-使用配置文件" class="headerlink" title="1.使用配置文件"></a>1.使用配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port=8111</span><br><span class="line">spring.security.user.name=atguigu</span><br><span class="line">spring.security.user.password=atguigu</span><br></pre></td></tr></table></figure><h3 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2.配置类"></a>2.配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        BCryptPasswordEncoder passwordEncoder=<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> passwordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;lucy&quot;</span>).password(password).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-自定义实现类配置（最常用）"><a href="#3-自定义实现类配置（最常用）" class="headerlink" title="3.自定义实现类配置（最常用）"></a>3.自定义实现类配置（最常用）</h3><p>security先去找配置文件和配置类，没有的话就会去找接口UserDetailService，进行登录认证</p><p>1.创建配置类，设置使用的UserDetailService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建一个类实现UserDetailService,其中的User使用的是框架的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span>  <span class="comment">//与配置类中的名字相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;marry&quot;</span>,<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123&quot;</span>),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自定义实现类配置-查数据库"><a href="#4-自定义实现类配置-查数据库" class="headerlink" title="4.自定义实现类配置.查数据库"></a>4.自定义实现类配置.查数据库</h3><p>mapper使用的是Mabatisplus，Users也是自己创建的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span>  <span class="comment">//与配置类中的名字相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String uesrname)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//调用方法查询数据库</span></span><br><span class="line">        QueryWrapper&lt;Users&gt; wrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,uesrname);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(users==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-改造登录页面-设置某些页面不认证也可访问"><a href="#5-改造登录页面-设置某些页面不认证也可访问" class="headerlink" title="5.改造登录页面+设置某些页面不认证也可访问"></a>5.改造登录页面+设置某些页面不认证也可访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">                .and().authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line">                .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">                .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/user/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>表单中的username和password必须是这个名字</p><h2 id="三-基于角色或权限进行访问控制"><a href="#三-基于角色或权限进行访问控制" class="headerlink" title="三.基于角色或权限进行访问控制"></a>三.基于角色或权限进行访问控制</h2><h3 id="hasAuthority方法-如果当前方法具有指定的权限，则返回true，只针对一个"><a href="#hasAuthority方法-如果当前方法具有指定的权限，则返回true，只针对一个" class="headerlink" title="hasAuthority方法:如果当前方法具有指定的权限，则返回true，只针对一个"></a>hasAuthority方法:如果当前方法具有指定的权限，则返回true，只针对一个</h3><p>1.配置类设置： .antMatchers(“&#x2F;test&#x2F;index”).hasAnyAuthority(“admins”)   &#x2F;&#x2F;表示当前登录的用户，只有admins权限才可以访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins&quot;</span>)   <span class="comment">//表示当前登录的用户，只有admins权限才可以访问</span></span><br><span class="line">                .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">            .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在MyUserDetailsService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br></pre></td></tr></table></figure><h3 id="hasAnyAuthority方法"><a href="#hasAnyAuthority方法" class="headerlink" title="hasAnyAuthority方法"></a>hasAnyAuthority方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                    .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line"><span class="comment">//                    .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)   //表示当前登录的用户，只有admins权限才可以访问</span></span><br><span class="line">                    .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins,manager&quot;</span>)   <span class="comment">//表示当前登录的用户，只有admins或manager权限才可以访问</span></span><br><span class="line">                    .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">                .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="hasRole-方法-如果当前主体具有指定的角色，则返回-true。"><a href="#hasRole-方法-如果当前主体具有指定的角色，则返回-true。" class="headerlink" title="hasRole 方法:如果当前主体具有指定的角色，则返回 true。"></a><strong>hasRole</strong> 方法:如果当前主体具有指定的角色，则返回 true。</h3><p>1.配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)    <span class="comment">//sale角色才可以操作</span></span><br></pre></td></tr></table></figure><p>2.在MyUserDetailsService:底层源码决定，得加ROLE_</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;manager,ROLE_sale&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="hasAnyRole-通hasAnyAuthority方法"><a href="#hasAnyRole-通hasAnyAuthority方法" class="headerlink" title="hasAnyRole:通hasAnyAuthority方法"></a>hasAnyRole:通hasAnyAuthority方法</h3><h2 id="四-自定义错误页面"><a href="#四-自定义错误页面" class="headerlink" title="四.自定义错误页面"></a>四.自定义错误页面</h2><h3 id="1-自定义403页面"><a href="#1-自定义403页面" class="headerlink" title="1. 自定义403页面"></a>1. 自定义403页面</h3><p>1.配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//配置没有权限访问跳转自定义页面</span></span><br><span class="line">    http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-注解使用"><a href="#五-注解使用" class="headerlink" title="五.注解使用"></a>五.注解使用</h2><h3 id="1-Secured-判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE-“。"><a href="#1-Secured-判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE-“。" class="headerlink" title="1.@Secured:判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。"></a>1.@Secured:判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。</h3><p>1.使用注解先要开启注解功能！:@EnableGlobalMethodSecurity(securedEnabled&#x3D;true)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.dale.securitydemo1&quot;)</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true)</span>  <span class="comment">//也可以放到配置类上面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Securitydemo1Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Securitydemo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在controller的方法上面使用注解，设置角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-PreAuthorize-注解适合进入方法前的权限验证，-PreAuthorize-可以将登录用户的-roles-x2F-permissions-参数传到方法中。"><a href="#2-PreAuthorize-注解适合进入方法前的权限验证，-PreAuthorize-可以将登录用户的-roles-x2F-permissions-参数传到方法中。" class="headerlink" title="2. @PreAuthorize:注解适合进入方法前的权限验证， @PreAuthorize 可以将登录用户的 roles&#x2F;permissions 参数传到方法中。"></a>2. @PreAuthorize:注解适合进入方法前的权限验证， @PreAuthorize 可以将登录用户的 roles&#x2F;permissions 参数传到方法中。</h3><p>1.使用注解先要开启注解功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true,prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p>2.在controller的方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-PostAuthorize-注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限"><a href="#3-PostAuthorize-注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限" class="headerlink" title="3.@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限."></a>3.@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限.</h3><p>1.使用注解先要开启注解功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prePostEnabled = true</span><br></pre></td></tr></table></figure><p>2.在controller的方法上添加注解：会打印出”update…..”，但页面访问不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span><br><span class="line">@GetMapping(&quot;update&quot;)</span><br><span class="line">public String update()&#123;</span><br><span class="line">    System.out.println(&quot;update.....&quot;);</span><br><span class="line">    return &quot;hello update&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-PostFilter-：权限验证之后对数据进行过滤-留下用户名是-admin1-的数据表达式中的-filterObject-引用的是方法返回值-List-中的某一个元素-对返回数据进行过滤"><a href="#4-PostFilter-：权限验证之后对数据进行过滤-留下用户名是-admin1-的数据表达式中的-filterObject-引用的是方法返回值-List-中的某一个元素-对返回数据进行过滤" class="headerlink" title="4.@PostFilter ：权限验证之后对数据进行过滤 留下用户名是 admin1 的数据表达式中的 filterObject 引用的是方法返回值 List 中的某一个元素,对返回数据进行过滤"></a>4.@PostFilter ：权限验证之后对数据进行过滤 留下用户名是 admin1 的数据表达式中的 filterObject 引用的是方法返回值 List 中的某一个元素,对返回数据进行过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getAll&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_管理员&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title function_">getAllUser</span><span class="params">()</span>&#123;</span><br><span class="line"> ArrayList&lt;UserInfo&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> list.add(<span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="number">1l</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;6666&quot;</span>));</span><br><span class="line"> list.add(<span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="number">2l</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;888&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-PreFilter-进入控制器之前对数据进行过滤，对传入数据进行过滤"><a href="#5-PreFilter-进入控制器之前对数据进行过滤，对传入数据进行过滤" class="headerlink" title="5.@PreFilter: 进入控制器之前对数据进行过滤，对传入数据进行过滤"></a>5.@PreFilter: 进入控制器之前对数据进行过滤，对传入数据进行过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getTestPreFilter&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_管理员&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PreFilter(value = &quot;filterObject.id%2==0&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title function_">getTestPreFilter</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;UserInfo&gt; </span></span><br><span class="line"><span class="params">list)</span>&#123;</span><br><span class="line"> list.forEach(t-&gt; &#123;</span><br><span class="line"> System.out.println(t.getId()+<span class="string">&quot;\t&quot;</span>+t.getUsername());</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-用户注销"><a href="#六-用户注销" class="headerlink" title="六.用户注销"></a>六.用户注销</h2><p>1.配置类中添加退出配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出</span></span><br><span class="line">http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/test/hello&quot;</span>).permitAll();</span><br></pre></td></tr></table></figure><h2 id="七-自动登录"><a href="#七-自动登录" class="headerlink" title="七.自动登录"></a>七.自动登录</h2><p>1.建表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `persistent_logins` (</span><br><span class="line"> `username` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line"> `series` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line"> `token` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line"> `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE </span><br><span class="line">CURRENT_TIMESTAMP,</span><br><span class="line"> PRIMARY <span class="title function_">KEY</span> <span class="params">(`series`)</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>2.修改配置类，注入数据源，配置操作数据库对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">//注入数据源。。新加</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作数据库的对象。。新加</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PersistentTokenRepository <span class="title function_">PersistentTokenRepository</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);  <span class="comment">//注入数据源</span></span><br><span class="line"><span class="comment">//        jdbcTokenRepository.setCreateTableOnStartup(true);  //在启动时创建表</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span></span><br><span class="line"><span class="comment">//        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//退出</span></span><br><span class="line">        http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/test/hello&quot;</span>).permitAll();</span><br><span class="line">        <span class="comment">//配置没有权限访问跳转自定义页面</span></span><br><span class="line">        http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/success.html&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                    .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line"><span class="comment">//                    .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)   //表示当前登录的用户，只有admins权限才可以访问</span></span><br><span class="line"><span class="comment">//                    .antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins,manager&quot;)   //表示当前登录的用户，只有admins或manager权限才可以访问</span></span><br><span class="line">                    .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)    <span class="comment">//sale角色才可以操作</span></span><br><span class="line">                    .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">                    .and().rememberMe().tokenRepository(PersistentTokenRepository())<span class="comment">//设置自动登录的。。新加</span></span><br><span class="line">                    .tokenValiditySeconds(<span class="number">60</span>)    <span class="comment">//60s过期。。新加</span></span><br><span class="line">                    .userDetailsService(userDetailsService)<span class="comment">//。。新加</span></span><br><span class="line">                .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.登录页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/user/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;remember-me&quot;&gt; 自动登录&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p> name&#x3D;”remember-me”固定.remember不要写错</p><h2 id="八-综合案例"><a href="#八-综合案例" class="headerlink" title="八.综合案例"></a>八.综合案例</h2><h3 id="1-认证授权过程分析"><a href="#1-认证授权过程分析" class="headerlink" title="1.认证授权过程分析"></a>1.认证授权过程分析</h3><p>（1）如果是基于 Session，那么 Spring-security 会对 cookie 里的 sessionid 进行解析，找到服务器存储的 session 信息，然后判断当前用户是否符合请求的要求。</p><p>（2）如果是 token，则是解析出 token，然后将当前请求加入到 Spring-security 管理的权限信息中去（此次选用这个）</p><p><img src="/../img/s1.png" alt="01"></p><p><img src="/img/s1.png" alt="01"></p><h3 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2.主要功能"></a>2.主要功能</h3><p>1.登录（认证）</p><p>2.添加角色</p><p>3.为角色分配菜单</p><p>4.添加用户</p><p>5.为用户分配角色</p><h3 id="3-搭建项目"><a href="#3-搭建项目" class="headerlink" title="3.搭建项目"></a>3.搭建项目</h3><p>1.创建父工程acl_parent: 管理依赖版本。</p><p>2.在父工程创建子模块</p><p>（1）common</p><ul><li><p>service_base：编写使用的工具类，例如MD5加密等等。</p></li><li><p>spring_security: springsecurity的相关配置。</p></li></ul><p>（2）infrastructure</p><ul><li>api_gateway: 配置网关内容。</li></ul><p>（3）service</p><ul><li>service_acl: 实现权限管理功能代码。</li></ul><p><img src="/img/s2.png" alt="02"></p><p><img src="/../img/s2.png" alt="02"></p><h3 id="4-spring-security内容"><a href="#4-spring-security内容" class="headerlink" title="4.spring_security内容"></a>4.spring_security内容</h3><p><img src="/img/s3.png" alt="03"></p><p><img src="/../img/s3.png" alt="03"></p><ul><li><p>TokenWebSecurityConfig：spring_security的整体配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TokenWebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    private DefaultPasswordEncoder defaultPasswordEncoder;</span><br><span class="line">    private UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public TokenWebSecurityConfig(TokenManager tokenManager, RedisTemplate redisTemplate, DefaultPasswordEncoder defaultPasswordEncoder, UserDetailsService userDetailsService) &#123;</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">        this.defaultPasswordEncoder = defaultPasswordEncoder;</span><br><span class="line">        this.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置设置</span><br><span class="line">     */</span><br><span class="line">    //设置退出的地址和 token，redis 操作地址</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(new UnauthEntryPoint())   //没有权限处理的时候调用的处理器，换成我们自定义的</span><br><span class="line">                .and().csrf().disable()   //关闭csrf</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().logout().logoutUrl(&quot;/admin/acl/index/logout&quot;) //退出的路径</span><br><span class="line">                .addLogoutHandler(new TokenLogoutHandler(tokenManager,redisTemplate)).and()  //自定义的</span><br><span class="line">                .addFilter(new TokenLoginFilter(tokenManager, redisTemplate, authenticationManager()))   // 自定义的</span><br><span class="line">                .addFilter(new TokenAuthFilter(authenticationManager(), tokenManager, redisTemplate)).httpBasic();  //自定义的</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //配置自定义的密码处理</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(defaultPasswordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置哪些请求不拦截</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(WebSecurity web) throws Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(&quot;/api/**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SecurityUser：实现了UserDetails接口，框架中的User继承UserDetails接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Slf4j</span><br><span class="line">public class SecurityUser implements UserDetails &#123;</span><br><span class="line">    //当前登录用户</span><br><span class="line">    private transient User currentUserInfo;</span><br><span class="line">    //当前权限</span><br><span class="line">    private List&lt;String&gt; permissionValueList;</span><br><span class="line"></span><br><span class="line">    public SecurityUser() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public SecurityUser(User user) &#123;</span><br><span class="line">        if (user != null) &#123;</span><br><span class="line">            this.currentUserInfo = user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();</span><br><span class="line">        for(String permissionValue : permissionValueList) &#123;</span><br><span class="line">            if(StringUtils.isEmpty(permissionValue)) continue;</span><br><span class="line">            SimpleGrantedAuthority authority = new</span><br><span class="line">                    SimpleGrantedAuthority(permissionValue);</span><br><span class="line">            authorities.add(authority);</span><br><span class="line">        &#125;</span><br><span class="line">        return authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return currentUserInfo.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return currentUserInfo.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonLocked() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCredentialsNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEnabled() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String nickName;</span><br><span class="line">    private String salt;</span><br><span class="line">    private String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenLoginFilter：用于登录时的过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class TokenLoginFilter extends UsernamePasswordAuthenticationFilter &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    private AuthenticationManager authenticationManager;   //源码中的</span><br><span class="line"></span><br><span class="line">    //为了在代码里面使用这些</span><br><span class="line">    public TokenLoginFilter(TokenManager tokenManager, RedisTemplate redisTemplate, AuthenticationManager authenticationManager) &#123;</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">        this.authenticationManager = authenticationManager;</span><br><span class="line">        this.setPostOnly(false);</span><br><span class="line">        this.setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(&quot;/admin/acl/login&quot;,&quot;POST&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取表单提交的用户名和密码</span><br><span class="line">    @Override</span><br><span class="line">    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            User user = new ObjectMapper().readValue(request.getInputStream(), User.class);</span><br><span class="line">            //封装成authentication</span><br><span class="line">            return authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(user.getUsername(),user.getPassword(),new ArrayList&lt;&gt;()));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //认证成功之后调用这个方法，通过authResult参数将认证的信息传递</span><br><span class="line">    @Override</span><br><span class="line">    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException &#123;</span><br><span class="line">        //得到认证成功之后的用户信息，SecurityUser implements UserDetails</span><br><span class="line">        SecurityUser user = (SecurityUser) authResult.getPrincipal();</span><br><span class="line">        //根据用户名生成token</span><br><span class="line">        String token = tokenManager.createToken(user.getCurrentUserInfo().getUsername());</span><br><span class="line">        //将用户名称和权限列表信息放入redis</span><br><span class="line">        redisTemplate.opsForValue().set(user.getCurrentUserInfo().getUsername(),user.getPermissionValueList());</span><br><span class="line"></span><br><span class="line">        ResponseUtil.out(response, R.ok().data(&quot;token&quot;,token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //认证失败调用的方法</span><br><span class="line">    @Override</span><br><span class="line">    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException &#123;</span><br><span class="line">        ResponseUtil.out(response,R.error());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenAuthFilter：用于授权时的过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class TokenAuthFilter extends BasicAuthenticationFilter &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    public TokenAuthFilter(AuthenticationManager authenticationManager,TokenManager tokenManager, RedisTemplate redisTemplate) &#123;</span><br><span class="line">        super(authenticationManager);</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        //获取当前认证成功的用户权限信息</span><br><span class="line">        UsernamePasswordAuthenticationToken authRequest = getAuthentication(request);</span><br><span class="line">        //如果有权限信息，就放到权限上下文中</span><br><span class="line">        if (authRequest!=null)&#123;</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) &#123;</span><br><span class="line">        //从header里面获取token</span><br><span class="line">        String token = request.getHeader(&quot;token&quot;);</span><br><span class="line">        if (token!=null)&#123;</span><br><span class="line">            //从token中获取用户名</span><br><span class="line">            String username = tokenManager.getUserInfoFromToken(token);</span><br><span class="line">            //从redis获取权限信息</span><br><span class="line">            List&lt;String&gt; permissionValueList = (List&lt;String&gt;) redisTemplate.opsForValue().get(username);</span><br><span class="line">            //将List&lt;String&gt;转换成Collection&lt;GrantedAuthority&gt;</span><br><span class="line">            Collection&lt;GrantedAuthority&gt; authority=new ArrayList&lt;&gt;();</span><br><span class="line">            for (String permissionValue: permissionValueList) &#123;</span><br><span class="line">                SimpleGrantedAuthority auth = new SimpleGrantedAuthority(permissionValue);</span><br><span class="line">                authority.add(auth);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return new UsernamePasswordAuthenticationToken(username,token,authority);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DefaultPasswordEncoder：自定义密码处理器，MD5加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DefaultPasswordEncoder implements PasswordEncoder &#123;</span><br><span class="line"></span><br><span class="line">    public DefaultPasswordEncoder() &#123;</span><br><span class="line">        this(-1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DefaultPasswordEncoder(int strength) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //进行MD5加密</span><br><span class="line">    @Override</span><br><span class="line">    public String encode(CharSequence charSequence) &#123;</span><br><span class="line">        return MD5.encrypt(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //进行密码的比对</span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(CharSequence charSequence, String encodedPassword) &#123;</span><br><span class="line">        return encodedPassword.equals(MD5.encrypt(charSequence.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenLogoutHandler：退出处理器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class TokenLogoutHandler implements LogoutHandler &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    public TokenLogoutHandler(TokenManager tokenManager, RedisTemplate redisTemplate) &#123;</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) &#123;</span><br><span class="line">        //1.从header里面获取token</span><br><span class="line">        String token = request.getHeader(&quot;token&quot;);</span><br><span class="line">        //2.token不为空，先移除token，再从Redis里面删除token，Redis存了key为用户名，value为权限数据</span><br><span class="line">        if (token!=null)&#123;</span><br><span class="line">            //移除</span><br><span class="line">            tokenManager.removeToken(token);</span><br><span class="line">            //从token获取用户名</span><br><span class="line">            String username = tokenManager.getUserInfoFromToken(token);</span><br><span class="line">            //从redis移除token</span><br><span class="line">            redisTemplate.delete(username);</span><br><span class="line">        &#125;</span><br><span class="line">        ResponseUtil.out(response, R.ok());  //响应头返回内容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenManager：token操作工具类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TokenManager &#123;</span><br><span class="line">    //token有效时间</span><br><span class="line">    private long tokenEcpiratin=24*60*60*1000;</span><br><span class="line">    //编码密钥</span><br><span class="line">    private String tokenSignKey=&quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">    //1.使用JWT根据用户名生成token</span><br><span class="line">    public String createToken(String username)&#123;</span><br><span class="line">        String token= Jwts.builder().setSubject(username)</span><br><span class="line">                .setExpiration(new Date(System.currentTimeMillis()+tokenEcpiratin))   //设置token过期时间</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512,tokenSignKey).compressWith(CompressionCodecs.GZIP).compact();   //设置编码密钥</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //根据token得到用户信息</span><br><span class="line">    public String getUserInfoFromToken(String token)&#123;</span><br><span class="line">        String userinfo = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token).getBody().getSubject();</span><br><span class="line">        return userinfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //删除token</span><br><span class="line">    public void removeToken(String token)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UnauthEntryPoint：用户为授权的处理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UnauthEntryPoint implements AuthenticationEntryPoint &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &#123;</span><br><span class="line">        ResponseUtil.out(httpServletResponse, R.error());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserDetailsServiceImpl：查数据库进行用户认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Service(&quot;userDetailsService&quot;)</span><br><span class="line">public class UserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">        //根据用户名查询数据</span><br><span class="line">        User user = userService.selectByUsername(username);</span><br><span class="line">        //判断</span><br><span class="line">        if(user == null) &#123;</span><br><span class="line">            throw new UsernameNotFoundException(&quot;用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        com.atguigu.security.entity.User curUser = new com.atguigu.security.entity.User();</span><br><span class="line">        BeanUtils.copyProperties(user,curUser);</span><br><span class="line"></span><br><span class="line">        //根据用户查询用户权限列表</span><br><span class="line">        List&lt;String&gt; permissionValueList = permissionService.selectPermissionValueByUserId(user.getId());</span><br><span class="line">        SecurityUser securityUser = new SecurityUser();</span><br><span class="line">        securityUser.setCurrentUserInfo(curUser);</span><br><span class="line">        securityUser.setPermissionValueList(permissionValueList);</span><br><span class="line">        return securityUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/post/f41870e2.html"/>
      <url>/post/f41870e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="java8新特性内容"><a href="#java8新特性内容" class="headerlink" title="java8新特性内容"></a>java8新特性内容</h2><p><img src="/../img/j1.png" alt="01"></p><p><img src="/img/j1.png" alt="01"></p><p>@[TOC]</p><h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1.Lambda表达式"></a>1.Lambda表达式</h2><h3 id="1-1-Lambda介绍"><a href="#1-1-Lambda介绍" class="headerlink" title="1.1 Lambda介绍"></a>1.1 Lambda介绍</h3><p> Lambda是一个匿名函数，可以理解为一段可以传递的代码（将代码像数据一样传递）；可以写出更简洁、更灵活的代码；作为一种更紧凑的代码风格，是Java语言表达能力得到提升。</p><h3 id="1-2-从匿名内部类到Lambda表达式"><a href="#1-2-从匿名内部类到Lambda表达式" class="headerlink" title="1.2 从匿名内部类到Lambda表达式"></a>1.2 从匿名内部类到Lambda表达式</h3><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// Lambda 表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (a, b) -&gt; Integer.compare(a, b);</span><br><span class="line"></span><br><span class="line">    TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3Lambda表达式语法"><a href="#1-3Lambda表达式语法" class="headerlink" title="1.3Lambda表达式语法"></a>1.3Lambda表达式语法</h3><p>Lambda 表达式在Java 语言中引入了一个新的语法元<br>素和操作符。这个操作符为 “-&gt;”， 该操作符被称<br>为 Lambda 操作符或剪头操作符。它将 Lambda 分为<br>两个部分：<br>左侧：指定了 Lambda 表达式需要的所有参数<br>右侧：指定了 Lambda 体，即 Lambda 表达式要执行<br>的功能。</p><h3 id="1-4-Lambda表达式举例"><a href="#1-4-Lambda表达式举例" class="headerlink" title="1.4 Lambda表达式举例"></a>1.4 Lambda表达式举例</h3><h4 id="语法格式一：无参，无返回值"><a href="#语法格式一：无参，无返回值" class="headerlink" title="语法格式一：无参，无返回值"></a>语法格式一：无参，无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//未使用Lambda表达式</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    r1.run();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    r2.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式二：Lambda-需要一个参数，但是没有返回值。"><a href="#语法格式二：Lambda-需要一个参数，但是没有返回值。" class="headerlink" title="语法格式二：Lambda 需要一个参数，但是没有返回值。"></a>语法格式二：Lambda 需要一个参数，但是没有返回值。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//未使用Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    con.accept(<span class="string">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”"><a href="#语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”" class="headerlink" title="语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”"></a>语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式三使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式三使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = (s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式四：Lambda-若只需要一个参数时，参数的小括号可以省略"><a href="#语法格式四：Lambda-若只需要一个参数时，参数的小括号可以省略" class="headerlink" title="语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略"></a>语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式四使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式四使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式五：Lambda-需要两个或以上的参数，多条执行语句，并且可以有返回值"><a href="#语法格式五：Lambda-需要两个或以上的参数，多条执行语句，并且可以有返回值" class="headerlink" title="语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值"></a>语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式五使用前</span></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式五使用后</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; &#123;</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">        System.out.println(o2);</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(com2.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式六：当-Lambda-体只有一条语句时，return-与大括号若有，都可以省略"><a href="#语法格式六：当-Lambda-体只有一条语句时，return-与大括号若有，都可以省略" class="headerlink" title="语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略"></a>语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式六使用前</span></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = (o1,o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(com1.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式六使用后</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; o1.compareTo(o2);</span><br><span class="line"></span><br><span class="line">    System.out.println(com2.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式六使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = s -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式六使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);</span><br><span class="line"></span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-语法总结"><a href="#1-5-语法总结" class="headerlink" title="1.5 语法总结"></a>1.5 语法总结</h3><p>-&gt;的左边：lambda的形参列表，参数的类型可以省略。如果形参只有一个，（）也可以省略。<br>-&gt;的右边：lambda体，对应着重写的方法体。如果方法体中只有一行执行语句，则{}可以省略，return也得省略。</p><h2 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2 函数式接口"></a>2 函数式接口</h2><h3 id="2-1-什么是函数式接口"><a href="#2-1-什么是函数式接口" class="headerlink" title="2.1 什么是函数式接口"></a>2.1 什么是函数式接口</h3><p>如果接口中只声明一个抽象方法，则此接口就称为函数式接口。只有给函数式接口提供实现类的对象时，才可以使用Lambda表达式。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><img src="https://img-blog.csdnimg.cn/acefdb3063284dedbade91b62186f665.png" alt="在这里插入图片描述"><br>还有以下这些：<br>•java.lang.Runnable<br>        public void run()</p><p>•java.lang.Iterable<br>        public Iterator iterate()</p><p>•java.lang.Comparable<br>        public int compareTo(T t)</p><p>•java.util.Comparator<br>        public int compare(T t1, T t2)</p><h3 id="2-2自定义函数式接口"><a href="#2-2自定义函数式接口" class="headerlink" title="2.2自定义函数式接口"></a>2.2自定义函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFunctionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFunctionalInterfaceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyFunctionalInterface</span> <span class="variable">m</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        m.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-四大核心函数式接口"><a href="#2-3-四大核心函数式接口" class="headerlink" title="2.3 四大核心函数式接口"></a>2.3 四大核心函数式接口</h3><table><thead><tr><th>函数式接口</th><th>称谓</th><th>参数类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer&lt; T &gt;</td><td>消费型接口</td><td>T</td><td>对类型为T的对象应用操作，包含方法： void accept(T t)</td></tr><tr><td>Supplier&lt; T&gt;</td><td>供给型接口</td><td>无</td><td>返回类型为T的对象，包含方法：T get()</td></tr><tr><td>Function&lt;T, R&gt;</td><td>函数型接口</td><td>T</td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)</td></tr><tr><td>Predicate<T></td><td>判断型接口</td><td>T</td><td>确定类型为T的对象是否满足某约束，并返回 boolean 值。包含方法：boolean test(T t)</td></tr></tbody></table><h2 id="3-方法引用与构造器引用"><a href="#3-方法引用与构造器引用" class="headerlink" title="3.方法引用与构造器引用"></a>3.方法引用与构造器引用</h2><ul><li>方法引用可以看做是Lambda表达式深层次的表达。</li><li>当需要提供一个函数式接口的实例时，我们可以使用lambda表达式提供此实例。当满足一定条件时，我们可以使用方法引用或构造器引用替换lambda表达式。</li><li>换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</li></ul><h3 id="3-1-方法引用格式"><a href="#3-1-方法引用格式" class="headerlink" title="3.1 方法引用格式"></a>3.1 方法引用格式</h3><p>格式：</p><ul><li>类（对象）:方法名</li><li>使用方法引用操作符 “::” 将类(或对象) 与 方法名分隔开来。</li><li>两个:中间不能有空格，而且必须英文状态下半角输入</li></ul><p>如下三种主要使用情况：<br>-情况1：对象 :: 实例方法名</p><ul><li>情况2：类 :: 静态方法名</li><li>   情况3：类 :: 实例方法名</li></ul><h3 id="3-2-对象-实例方法名"><a href="#3-2-对象-实例方法名" class="headerlink" title="3.2 对象 :: 实例方法名"></a>3.2 对象 :: 实例方法名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Consumer&lt;String&gt; con1 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">con1.accept(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. lambda表达式</span></span><br><span class="line">Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);</span><br><span class="line">con2.accept(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">Consumer&lt;String&gt; con3 = ps :: println;</span><br><span class="line">con3.accept(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="number">34</span>, <span class="number">6000.38</span>);</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Supplier&lt;String&gt; sup1 = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> emp.getName();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. lambda表达式</span></span><br><span class="line">Supplier&lt;String&gt; sup2 = () -&gt; emp.getName();</span><br><span class="line">System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line">Supplier&lt;String&gt; sup3 = emp::getName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>要求总结：函数式接口中的抽象方法a与其内部实现时调用的对象的某个方法b的形参列表和返回值类型都相同。<br>此时可以考虑使用方法b实现对方法a的替换，覆盖。</strong></p><p><strong>注意点：此方法b是非静态的方法，需要对象调用</strong></p><h3 id="3-3-类-静态方法名"><a href="#3-3-类-静态方法名" class="headerlink" title="3.3 类 :: 静态方法名"></a>3.3 类 :: 静态方法名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(com1.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">System.out.println(com2.compare(<span class="number">21</span>, <span class="number">34</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line">Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class="line">System.out.println(com3.compare(<span class="number">34</span>, <span class="number">34</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Function&lt;Double,Long&gt; fun1 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.round(aDouble);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">Function&lt;Double,Long&gt; fun2 = aDouble -&gt; Math.round(aDouble);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.方法引用</span></span><br><span class="line">Function&lt;Double,Long&gt; fun3 = Math :: round;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数式接口中的抽象方法a在被重写时使用了某一个类的静态方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</strong></p><p><strong>注意：此方法b是静态的方法，需要类调用</strong></p><h3 id="3-4-类-实例方法"><a href="#3-4-类-实例方法" class="headerlink" title="3.4 类 :: 实例方法"></a>3.4 类 :: 实例方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Comparator&lt;String&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.lambda表达式</span></span><br><span class="line">Comparator&lt;String&gt; com2 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">System.out.println(com2.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abb&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line">Comparator&lt;String&gt; com3 = String :: compareTo;</span><br><span class="line">System.out.println(com3.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abb&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">BiPredicate&lt;String,String&gt; biPre1 = <span class="keyword">new</span> <span class="title class_">BiPredicate</span>&lt;String, String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s1.equals(s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">BiPredicate&lt;String,String&gt; biPre2 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line">BiPredicate&lt;String,String&gt; biPre3 = String :: equals;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>要求：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的返回值类型与方法b的返回值类型相同，同时方法a的形参列表中有n个参数，方法b的形参列表有n-1个参数，且方法a的第1个参数作为方法b的调用者，且方法a的后n-1参数与方法b的n-1参数匹配（类型相同或满足多态场景也可以）</strong></p><p><strong>注意：此方法b是非静态的方法，需要对象调用。但是形式上写成对象a所属的类。</strong></p><h3 id="3-5-构造器引用"><a href="#3-5-构造器引用" class="headerlink" title="3.5 构造器引用"></a>3.5 构造器引用</h3><p>当Lambda表达式是创建一个对象，并且满足Lambda表达式形参，正好是给创建这个对象的构造器的实参列表，就可以使用构造器引用。</p><p>格式：类名::new;</p><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        Supplier&lt;Employee&gt; sup1 = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.构造器引用</span></span><br><span class="line">        Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>; <span class="comment">//调用的是Employee类中空参的构造器</span></span><br><span class="line">        System.out.println(sup2.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    Function&lt;Integer,Employee&gt; func1 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Employee&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Employee <span class="title function_">apply</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(func1.apply(<span class="number">12</span>));</span><br><span class="line">    <span class="comment">//2.构造器引用</span></span><br><span class="line">    Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>; <span class="comment">//调用的是Employee类中参数是Integer/int类型的构造器</span></span><br><span class="line">    System.out.println(func2.apply(<span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组引用</span></span><br><span class="line">   <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1.</span></span><br><span class="line">       Function&lt;Integer,Employee[]&gt; func1 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Employee[]&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Employee[] apply(Integer length) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>[length];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(func1.apply(<span class="number">10</span>).length);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.</span></span><br><span class="line">       Function&lt;Integer,Employee[]&gt; func2 = Employee[] :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(func2.apply(<span class="number">20</span>).length);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4-Stream-API"><a href="#4-Stream-API" class="headerlink" title="4 Stream API"></a>4 Stream API</h2><ul><li>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</li><li>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，讲的是数据，而 Stream 是有关计算的，讲的是计算。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</li><li>注意：<br>①Stream 自己不会存储元素。<br>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。<br>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。即一旦执行终止操作，就执行中间操作链，并产生结果。<br>④ Stream一旦执行了终止操作，就不能再调用其它中间操作或终止操作了。</li></ul><h3 id="4-1-Stream的执行流程"><a href="#4-1-Stream的执行流程" class="headerlink" title="4.1 Stream的执行流程"></a>4.1 Stream的执行流程</h3><p><strong>1- 创建 Stream</strong><br>一个数据源（如：集合、数组），获取一个流</p><p><strong>2- 中间操作</strong><br>每次处理都会返回一个持有结果的新Stream，即中间操作的方法返回值仍然是Stream类型的对象。因此中间操作可以是个<code>操作链</code>，可对数据源的数据进行n次处理，但是在终结操作前，并不会真正执行。</p><p><strong>3- 终止操作(终端操作)</strong><br>终止操作的方法返回值类型就不再是Stream了，因此一旦执行终止操作，就结束整个Stream操作了。一旦执行终止操作，就执行中间操作链，最终产生结果并结束Stream。<br><img src="https://img-blog.csdnimg.cn/7a2e8d192e294b4eaebd670cb05a5c49.png" alt="在这里插入图片描述"></p><h3 id="4-2-创建Stream"><a href="#4-2-创建Stream" class="headerlink" title="4.2 创建Stream"></a>4.2 创建Stream</h3><ul><li>1.方式一：通过集合<br>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：<br>default Stream stream() : 返回一个顺序流<br>default Stream parallelStream() : 返回一个并行流<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream1 = list.parallelStream();</span><br><span class="line"></span><br><span class="line">        System.out.println(stream);</span><br><span class="line">        System.out.println(stream1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>2.创建 Stream方式二：通过数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">stream1</span> <span class="operator">=</span> Arrays.stream(arr1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>创建 Stream方式三：通过Stream的of() <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">     Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;SS&quot;</span>, <span class="string">&quot;DD&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h3 id="4-3-一系列中间操作"><a href="#4-3-一系列中间操作" class="headerlink" title="4.3 一系列中间操作"></a>4.3 一系列中间操作</h3><p>1.筛选与切片</p><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>filter(Predicatep)</strong></td><td>接收  Lambda ， 从流中排除某些元素</td></tr><tr><td><strong>distinct()</strong></td><td>筛选，通过流所生成元素的  hashCode() 和 equals() 去除重复元素</td></tr><tr><td><strong>limit(long maxSize)</strong></td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><strong>skip(long n)</strong></td><td>跳过元素，返回一个扔掉了前  n 个元素的流。<br>若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td></tr></tbody></table><p>2.映 射</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>map(Function f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td><strong>mapToDouble(ToDoubleFunction f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td></tr><tr><td><strong>mapToInt(ToIntFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  IntStream。</td></tr><tr><td><strong>mapToLong(ToLongFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  LongStream。</td></tr><tr><td><strong>flatMap(Function  f)</strong></td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table><p>3.排序</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>sorted()</strong></td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td><strong>sorted(Comparator</strong> <strong>com)</strong></td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAPITest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-筛选与切片</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        filter(Predicate p)——接收 Lambda，从流中排除某些元素。</span></span><br><span class="line">        <span class="comment">//练习：查询员工表中薪资大于7000的员工信息</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line">        stream.filter(emp -&gt; emp.getSalary() &gt; <span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        limit(n)——截断流，使其元素不超过给定数量。</span></span><br><span class="line">        <span class="comment">//错误的。因为stream已经执行了终止操作，就不可以再调用其它的中间操作或终止操作了。</span></span><br><span class="line"><span class="comment">//        stream.limit(2).forEach(System.out::println);</span></span><br><span class="line">        list.stream().filter(emp -&gt; emp.getSalary() &gt; <span class="number">7000</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line">        list.stream().skip(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line"></span><br><span class="line">        list.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-映射</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，</span></span><br><span class="line">        <span class="comment">//并将其映射成一个新的元素。</span></span><br><span class="line">        <span class="comment">//练习：转换为大写</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        list.stream().map(String :: toUpperCase).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习：获取员工姓名长度大于3的员工。</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        employees.stream().filter(emp -&gt; emp.getName().length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习：获取员工姓名长度大于3的员工的姓名。</span></span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        employees.stream().filter(emp -&gt; emp.getName().length() &gt; <span class="number">3</span>).map(emp -&gt; emp.getName()).forEach(System.out::println);</span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        employees.stream().map(emp -&gt; emp.getName()).filter(name -&gt; name.length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">//方式3：</span></span><br><span class="line">        employees.stream().map(Employee::getName).filter(name -&gt; name.length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//sorted()——自然排序</span></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">345</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">3</span>,<span class="number">46</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">68</span>&#125;;</span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;DD&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;SS&quot;</span>,<span class="string">&quot;JJ&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.stream(arr).sorted().forEach(System.out::println);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//arr数组并没有因为升序，做调整。</span></span><br><span class="line"></span><br><span class="line">        Arrays.stream(arr1).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Employee没有实现Comparable接口，所以报错！要想实现自然排序，需要当前的类实现Comparable接口</span></span><br><span class="line"><span class="comment">//        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span></span><br><span class="line"><span class="comment">//        list.stream().sorted().forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//sorted(Comparator com)——定制排序</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        list.stream().sorted((e1,e2) -&gt; e1.getAge() - e2.getAge()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//针对于字符串从大大小排列</span></span><br><span class="line">        Arrays.stream(arr1).sorted((s1,s2) -&gt; -s1.compareTo(s2)).forEach(System.out::println);</span><br><span class="line"><span class="comment">//        Arrays.stream(arr1).sorted(String :: compareTo).forEach(System.out::println);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4-终止操作"><a href="#4-4-终止操作" class="headerlink" title="4.4 终止操作"></a>4.4 终止操作</h3><ul><li><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</p></li><li><p>流进行了终止操作后，不能再次使用。</p></li></ul><p>1-匹配与查找</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>allMatch(Predicate  p)</strong></td><td>检查是否匹配所有元素</td></tr><tr><td>**anyMatch(Predicate  p)  **</td><td>检查是否至少匹配一个元素</td></tr><tr><td><strong>noneMatch(Predicate</strong>  <strong>p)</strong></td><td>检查是否没有匹配所有元素</td></tr><tr><td><strong>findFirst()</strong></td><td>返回第一个元素</td></tr><tr><td><strong>findAny()</strong></td><td>返回当前流中的任意元素</td></tr><tr><td><strong>count()</strong></td><td>返回流中元素总数</td></tr><tr><td><strong>max(Comparator c)</strong></td><td>返回流中最大值</td></tr><tr><td><strong>min(Comparator c)</strong></td><td>返回流中最小值</td></tr><tr><td><strong>forEach(Consumer c)</strong></td><td>内部迭代(使用  Collection  接口需要用户去做迭代，称为外部迭代。<br>相反，Stream  API 使用内部迭代——它帮你把迭代做了)</td></tr></tbody></table><p>2-归约</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>reduce(T  identity, BinaryOperator b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回  T</td></tr><tr><td><strong>reduce(BinaryOperator  b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回 Optional<T></td></tr></tbody></table><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。</p><p>3-收集</p><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>collect(Collector  c)</strong></td><td>将流转换为其他形式。接收一个  Collector接口的实现，<br>用于给Stream中元素做汇总的方法</td></tr></tbody></table><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。</p><p>另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toList</strong></td><td>Collector&lt;T, ?, List<T>&gt;</td><td>把流中元素收集到List</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; emps= list.stream().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toSet</strong></td><td>Collector&lt;T, ?, Set<T>&gt;</td><td>把流中元素收集到Set</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Employee&gt; emps= list.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toCollection</strong></td><td>Collector&lt;T, ?, C&gt;</td><td>把流中元素收集到创建的集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Employee&gt; emps =list.stream().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>counting</strong></td><td>Collector&lt;T, ?, Long&gt;</td><td>计算流中元素的个数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summingInt</strong></td><td>Collector&lt;T, ?, Integer&gt;</td><td>对流中元素的整数属性求和</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.summingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>averagingInt</strong></td><td>Collector&lt;T, ?, Double&gt;</td><td>计算流中元素Integer属性的平均值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> list.stream().collect(Collectors.averagingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summarizingInt</strong></td><td>Collector&lt;T, ?, IntSummaryStatistics&gt;</td><td>收集流中Integer属性的统计值。如：平均值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>joining</strong></td><td>Collector&lt;CharSequence, ?, String&gt;</td><td>连接流中每个字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str= list.stream().map(Employee::getName).collect(Collectors.joining());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>maxBy</strong></td><td>Collector&lt;T, ?, Optional<T>&gt;</td><td>根据比较器选择最大值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt;max= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>minBy</strong></td><td>Collector&lt;T, ?, Optional<T>&gt;</td><td>根据比较器选择最小值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt; min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>reducing</strong></td><td>Collector&lt;T, ?, Optional<T>&gt;</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.reducing(<span class="number">0</span>, Employee::getSalar, Integer::sum));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>collectingAndThen</strong></td><td>Collector&lt;T,A,RR&gt;</td><td>包裹另一个收集器，对其结果转换函数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> how= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>groupingBy</strong></td><td>Collector&lt;T, ?, Map&lt;K, List<T>&gt;&gt;</td><td>根据某属性值对流分组，属性为K，结果为V</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Emp.Status, List&lt;Emp&gt;&gt; map= list.stream().collect(Collectors.groupingBy(Employee::getStatus));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>partitioningBy</strong></td><td>Collector&lt;T, ?, Map&lt;Boolean, List<T>&gt;&gt;</td><td>根据true或false进行分区</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean,List&lt;Emp&gt;&gt; vd = list.stream().collect(Collectors.partitioningBy(Employee::getManage));</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAPITest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-匹配与查找</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class="line"><span class="comment">//          练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        System.out.println(list.stream().allMatch(emp -&gt; emp.getAge() &gt; <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class="line">        <span class="comment">//练习：是否存在年龄大于18岁的员工</span></span><br><span class="line">        System.out.println(list.stream().anyMatch(emp -&gt; emp.getAge() &gt; <span class="number">18</span>));</span><br><span class="line"><span class="comment">//         练习：是否存在员工的工资大于 10000</span></span><br><span class="line">        System.out.println(list.stream().anyMatch(emp -&gt; emp.getSalary() &gt; <span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        findFirst——返回第一个元素</span></span><br><span class="line">        System.out.println(list.stream().findFirst().get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// count——返回流中元素的总个数</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        System.out.println(list.stream().filter(emp -&gt; emp.getSalary() &gt; <span class="number">7000</span>).count());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        max(Comparator c)——返回流中最大值</span></span><br><span class="line">        <span class="comment">//练习：返回最高工资的员工</span></span><br><span class="line">        System.out.println(list.stream().max((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        练习：返回最高的工资：</span></span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        System.out.println(list.stream().max((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())).get().getSalary());</span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        System.out.println(list.stream().map(emp -&gt; emp.getSalary()).max((salary1, salary2) -&gt; Double.compare(salary1, salary2)).get());</span><br><span class="line">        System.out.println(list.stream().map(emp -&gt; emp.getSalary()).max(Double::compare).get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        min(Comparator c)——返回流中最小值</span></span><br><span class="line"><span class="comment">//        练习：返回最低工资的员工</span></span><br><span class="line">        System.out.println(list.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        forEach(Consumer c)——内部迭代</span></span><br><span class="line">        list.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//针对于集合，jdk8中增加了一个遍历的方法</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">        <span class="comment">//针对于List来说，遍历的方式：① 使用Iterator ② 增强for ③ 一般for ④ forEach()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-归约</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line"><span class="comment">//        练习1：计算1-10的自然数的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">0</span>, (x1, x2) -&gt; x1 + x2));</span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">0</span>, (x1, x2) -&gt; Integer.sum(x1,x2)));</span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">0</span>, Integer::sum));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">10</span>, (x1, x2) -&gt; x1 + x2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line"><span class="comment">//        练习2：计算公司所有员工工资的总和</span></span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployees();</span><br><span class="line">        System.out.println(employeeList.stream().map(emp -&gt; emp.getSalary()).reduce((salary1, salary2) -&gt; Double.sum(salary1, salary2)));</span><br><span class="line">        System.out.println(employeeList.stream().map(emp -&gt; emp.getSalary()).reduce(Double::sum));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-收集</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//        collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line"><span class="comment">//        练习1：查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class="line">        List&lt;Employee&gt; list1 = list.stream().filter(emp -&gt; emp.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line">        list1.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        练习2：按照员工的年龄进行排序，返回到一个新的List中</span></span><br><span class="line">        List&lt;Employee&gt; list2 = list.stream().sorted((e1, e2) -&gt; e1.getAge() - e2.getAge()).collect(Collectors.toList());</span><br><span class="line">        list2.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
