<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker学习总结</title>
      <link href="/post/bec98339.html"/>
      <url>/post/bec98339.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-安装"><a href="#一-安装" class="headerlink" title="一.安装"></a>一.安装</h2><h3 id="1-centos安装docker"><a href="#1-centos安装docker" class="headerlink" title="1.centos安装docker"></a>1.centos安装docker</h3><ul><li><p>安装gcc相关的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>安装所需要的软件包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>设置stable镜像仓库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http:<span class="comment">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li><li><p>更新yum软件包索引，便于后续下载更快</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装docker ce</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker并执行hello world案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-配置阿里云镜像加速器"><a href="#2-配置阿里云镜像加速器" class="headerlink" title="2.配置阿里云镜像加速器"></a>2.配置阿里云镜像加速器</h3><p><img src="/../img/d1.png" alt="image-20230625132324589"></p><p><img src="/img/d1.png" alt="image-20230625132324589"></p><h2 id="二-docker常用命令"><a href="#二-docker常用命令" class="headerlink" title="二.docker常用命令"></a>二.docker常用命令</h2><h3 id="1-帮助启动类命令"><a href="#1-帮助启动类命令" class="headerlink" title="1.帮助启动类命令"></a>1.帮助启动类命令</h3><p><img src="/../img/d2.png" alt="image-20230625134249590"></p><p><img src="/img/d2.png" alt="image-20230625134249590"></p><h3 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h3><p><img src="/../img/d3.png" alt="image-20230625140750333"></p><p><img src="/img/d3.png" alt="image-20230625140750333"></p><h3 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h3><p>1.新建+启动容器</p><p>docker run -it centos &#x2F;bin&#x2F;bash      </p><p>2.列出当前正在运行的容器</p><p>docker ps                        docker ps -a   列出历史容器</p><p>3.退出容器</p><p>exit   —-&gt; run进去，exit退出，容器停止</p><p>ctrl+p+q    —-&gt;run进去，ctrl+p+q退出，容器不停止</p><p>4.重启容器</p><p>docker restart mysql</p><p>5.删除容器</p><p>docker rm mysql</p><p>docker rm -f mysql 强制删除</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring security总结</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-两大重要接口"><a href="#一-两大重要接口" class="headerlink" title="一.两大重要接口"></a>一.两大重要接口</h3><p>实现用户认证：UserDetailService</p><p>1.创建一个类继承UsernamePasswordAuthenticationFilter，重写3个方法</p><p>2.创建类实现UserDetailService，编写查询数据过程，返回User对象，这个User对象是安全框架提供的对象。</p><p>对密码进行加密：PasswordEncoder</p><h2 id="二-设置登录用户名和密码"><a href="#二-设置登录用户名和密码" class="headerlink" title="二.设置登录用户名和密码"></a>二.设置登录用户名和密码</h2><h3 id="1-使用配置文件"><a href="#1-使用配置文件" class="headerlink" title="1.使用配置文件"></a>1.使用配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port=8111</span><br><span class="line">spring.security.user.name=atguigu</span><br><span class="line">spring.security.user.password=atguigu</span><br></pre></td></tr></table></figure><h3 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2.配置类"></a>2.配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        BCryptPasswordEncoder passwordEncoder=<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> passwordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;lucy&quot;</span>).password(password).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-自定义实现类配置（最常用）"><a href="#3-自定义实现类配置（最常用）" class="headerlink" title="3.自定义实现类配置（最常用）"></a>3.自定义实现类配置（最常用）</h3><p>security先去找配置文件和配置类，没有的话就会去找接口UserDetailService，进行登录认证</p><p>1.创建配置类，设置使用的UserDetailService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建一个类实现UserDetailService,其中的User使用的是框架的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span>  <span class="comment">//与配置类中的名字相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;marry&quot;</span>,<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123&quot;</span>),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自定义实现类配置-查数据库"><a href="#4-自定义实现类配置-查数据库" class="headerlink" title="4.自定义实现类配置.查数据库"></a>4.自定义实现类配置.查数据库</h3><p>mapper使用的是Mabatisplus，Users也是自己创建的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span>  <span class="comment">//与配置类中的名字相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String uesrname)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//调用方法查询数据库</span></span><br><span class="line">        QueryWrapper&lt;Users&gt; wrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,uesrname);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(users==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-改造登录页面-设置某些页面不认证也可访问"><a href="#5-改造登录页面-设置某些页面不认证也可访问" class="headerlink" title="5.改造登录页面+设置某些页面不认证也可访问"></a>5.改造登录页面+设置某些页面不认证也可访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">                .and().authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line">                .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">                .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/user/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>表单中的username和password必须是这个名字</p><h2 id="三-基于角色或权限进行访问控制"><a href="#三-基于角色或权限进行访问控制" class="headerlink" title="三.基于角色或权限进行访问控制"></a>三.基于角色或权限进行访问控制</h2><h3 id="hasAuthority方法-如果当前方法具有指定的权限，则返回true，只针对一个"><a href="#hasAuthority方法-如果当前方法具有指定的权限，则返回true，只针对一个" class="headerlink" title="hasAuthority方法:如果当前方法具有指定的权限，则返回true，只针对一个"></a>hasAuthority方法:如果当前方法具有指定的权限，则返回true，只针对一个</h3><p>1.配置类设置： .antMatchers(“&#x2F;test&#x2F;index”).hasAnyAuthority(“admins”)   &#x2F;&#x2F;表示当前登录的用户，只有admins权限才可以访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins&quot;</span>)   <span class="comment">//表示当前登录的用户，只有admins权限才可以访问</span></span><br><span class="line">                .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">            .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在MyUserDetailsService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admins&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(users.getUsername(),<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(users.getPassword()),auths);</span><br></pre></td></tr></table></figure><h3 id="hasAnyAuthority方法"><a href="#hasAnyAuthority方法" class="headerlink" title="hasAnyAuthority方法"></a>hasAnyAuthority方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                    .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line"><span class="comment">//                    .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)   //表示当前登录的用户，只有admins权限才可以访问</span></span><br><span class="line">                    .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins,manager&quot;</span>)   <span class="comment">//表示当前登录的用户，只有admins或manager权限才可以访问</span></span><br><span class="line">                    .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">                .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="hasRole-方法-如果当前主体具有指定的角色，则返回-true。"><a href="#hasRole-方法-如果当前主体具有指定的角色，则返回-true。" class="headerlink" title="hasRole 方法:如果当前主体具有指定的角色，则返回 true。"></a><strong>hasRole</strong> 方法:如果当前主体具有指定的角色，则返回 true。</h3><p>1.配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)    <span class="comment">//sale角色才可以操作</span></span><br></pre></td></tr></table></figure><p>2.在MyUserDetailsService:底层源码决定，得加ROLE_</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;GrantedAuthority&gt; auths= AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;manager,ROLE_sale&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="hasAnyRole-通hasAnyAuthority方法"><a href="#hasAnyRole-通hasAnyAuthority方法" class="headerlink" title="hasAnyRole:通hasAnyAuthority方法"></a>hasAnyRole:通hasAnyAuthority方法</h3><h2 id="四-自定义错误页面"><a href="#四-自定义错误页面" class="headerlink" title="四.自定义错误页面"></a>四.自定义错误页面</h2><h3 id="1-自定义403页面"><a href="#1-自定义403页面" class="headerlink" title="1. 自定义403页面"></a>1. 自定义403页面</h3><p>1.配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//配置没有权限访问跳转自定义页面</span></span><br><span class="line">    http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-注解使用"><a href="#五-注解使用" class="headerlink" title="五.注解使用"></a>五.注解使用</h2><h3 id="1-Secured-判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE-“。"><a href="#1-Secured-判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE-“。" class="headerlink" title="1.@Secured:判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。"></a>1.@Secured:判断是否具有角色，有才可以访问这个方法，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。</h3><p>1.使用注解先要开启注解功能！:@EnableGlobalMethodSecurity(securedEnabled&#x3D;true)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.dale.securitydemo1&quot;)</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true)</span>  <span class="comment">//也可以放到配置类上面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Securitydemo1Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Securitydemo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在controller的方法上面使用注解，设置角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_manager&quot;&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-PreAuthorize-注解适合进入方法前的权限验证，-PreAuthorize-可以将登录用户的-roles-x2F-permissions-参数传到方法中。"><a href="#2-PreAuthorize-注解适合进入方法前的权限验证，-PreAuthorize-可以将登录用户的-roles-x2F-permissions-参数传到方法中。" class="headerlink" title="2. @PreAuthorize:注解适合进入方法前的权限验证， @PreAuthorize 可以将登录用户的 roles&#x2F;permissions 参数传到方法中。"></a>2. @PreAuthorize:注解适合进入方法前的权限验证， @PreAuthorize 可以将登录用户的 roles&#x2F;permissions 参数传到方法中。</h3><p>1.使用注解先要开启注解功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true,prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p>2.在controller的方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-PostAuthorize-注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限"><a href="#3-PostAuthorize-注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限" class="headerlink" title="3.@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限."></a>3.@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值的权限.</h3><p>1.使用注解先要开启注解功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prePostEnabled = true</span><br></pre></td></tr></table></figure><p>2.在controller的方法上添加注解：会打印出”update…..”，但页面访问不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;)</span><br><span class="line">@GetMapping(&quot;update&quot;)</span><br><span class="line">public String update()&#123;</span><br><span class="line">    System.out.println(&quot;update.....&quot;);</span><br><span class="line">    return &quot;hello update&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-PostFilter-：权限验证之后对数据进行过滤-留下用户名是-admin1-的数据表达式中的-filterObject-引用的是方法返回值-List-中的某一个元素-对返回数据进行过滤"><a href="#4-PostFilter-：权限验证之后对数据进行过滤-留下用户名是-admin1-的数据表达式中的-filterObject-引用的是方法返回值-List-中的某一个元素-对返回数据进行过滤" class="headerlink" title="4.@PostFilter ：权限验证之后对数据进行过滤 留下用户名是 admin1 的数据表达式中的 filterObject 引用的是方法返回值 List 中的某一个元素,对返回数据进行过滤"></a>4.@PostFilter ：权限验证之后对数据进行过滤 留下用户名是 admin1 的数据表达式中的 filterObject 引用的是方法返回值 List 中的某一个元素,对返回数据进行过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getAll&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_管理员&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title function_">getAllUser</span><span class="params">()</span>&#123;</span><br><span class="line"> ArrayList&lt;UserInfo&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> list.add(<span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="number">1l</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;6666&quot;</span>));</span><br><span class="line"> list.add(<span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="number">2l</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;888&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-PreFilter-进入控制器之前对数据进行过滤，对传入数据进行过滤"><a href="#5-PreFilter-进入控制器之前对数据进行过滤，对传入数据进行过滤" class="headerlink" title="5.@PreFilter: 进入控制器之前对数据进行过滤，对传入数据进行过滤"></a>5.@PreFilter: 进入控制器之前对数据进行过滤，对传入数据进行过滤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;getTestPreFilter&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_管理员&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PreFilter(value = &quot;filterObject.id%2==0&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title function_">getTestPreFilter</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;UserInfo&gt; </span></span><br><span class="line"><span class="params">list)</span>&#123;</span><br><span class="line"> list.forEach(t-&gt; &#123;</span><br><span class="line"> System.out.println(t.getId()+<span class="string">&quot;\t&quot;</span>+t.getUsername());</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六-用户注销"><a href="#六-用户注销" class="headerlink" title="六.用户注销"></a>六.用户注销</h2><p>1.配置类中添加退出配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出</span></span><br><span class="line">http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/test/hello&quot;</span>).permitAll();</span><br></pre></td></tr></table></figure><h2 id="七-自动登录"><a href="#七-自动登录" class="headerlink" title="七.自动登录"></a>七.自动登录</h2><p>1.建表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `persistent_logins` (</span><br><span class="line"> `username` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line"> `series` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line"> `token` varchar(<span class="number">64</span>) NOT NULL,</span><br><span class="line"> `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE </span><br><span class="line">CURRENT_TIMESTAMP,</span><br><span class="line"> PRIMARY <span class="title function_">KEY</span> <span class="params">(`series`)</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>2.修改配置类，注入数据源，配置操作数据库对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfigTest</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">//注入数据源。。新加</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作数据库的对象。。新加</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PersistentTokenRepository <span class="title function_">PersistentTokenRepository</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">jdbcTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);  <span class="comment">//注入数据源</span></span><br><span class="line"><span class="comment">//        jdbcTokenRepository.setCreateTableOnStartup(true);  //在启动时创建表</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span></span><br><span class="line"><span class="comment">//        auth.userDetailsService(userDetailsService).passwordEncoder(password());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">password</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//退出</span></span><br><span class="line">        http.logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="string">&quot;/test/hello&quot;</span>).permitAll();</span><br><span class="line">        <span class="comment">//配置没有权限访问跳转自定义页面</span></span><br><span class="line">        http.exceptionHandling().accessDeniedPage(<span class="string">&quot;/unauth.html&quot;</span>);</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)    <span class="comment">//自定义自己的登录页面</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)  <span class="comment">//登录访问的路径</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/success.html&quot;</span>).permitAll()    <span class="comment">//登录成功跳转到的路径</span></span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                    .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll()  <span class="comment">//设置哪些不需要认证就可以访问</span></span><br><span class="line"><span class="comment">//                    .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)   //表示当前登录的用户，只有admins权限才可以访问</span></span><br><span class="line"><span class="comment">//                    .antMatchers(&quot;/test/index&quot;).hasAnyAuthority(&quot;admins,manager&quot;)   //表示当前登录的用户，只有admins或manager权限才可以访问</span></span><br><span class="line">                    .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasRole(<span class="string">&quot;sale&quot;</span>)    <span class="comment">//sale角色才可以操作</span></span><br><span class="line">                    .anyRequest().authenticated()   <span class="comment">//任意请求必须认证才可以访问</span></span><br><span class="line">                    .and().rememberMe().tokenRepository(PersistentTokenRepository())<span class="comment">//设置自动登录的。。新加</span></span><br><span class="line">                    .tokenValiditySeconds(<span class="number">60</span>)    <span class="comment">//60s过期。。新加</span></span><br><span class="line">                    .userDetailsService(userDetailsService)<span class="comment">//。。新加</span></span><br><span class="line">                .and().csrf().disable();  <span class="comment">//关闭csr防护</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.登录页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/user/login&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">    密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;remember-me&quot;&gt; 自动登录&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p> name&#x3D;”remember-me”固定.remember不要写错</p><h2 id="八-综合案例"><a href="#八-综合案例" class="headerlink" title="八.综合案例"></a>八.综合案例</h2><h3 id="1-认证授权过程分析"><a href="#1-认证授权过程分析" class="headerlink" title="1.认证授权过程分析"></a>1.认证授权过程分析</h3><p>（1）如果是基于 Session，那么 Spring-security 会对 cookie 里的 sessionid 进行解析，找到服务器存储的 session 信息，然后判断当前用户是否符合请求的要求。</p><p>（2）如果是 token，则是解析出 token，然后将当前请求加入到 Spring-security 管理的权限信息中去（此次选用这个）</p><p><img src="/../img/s1.png" alt="01"></p><p><img src="/img/s1.png" alt="01"></p><h3 id="2-主要功能"><a href="#2-主要功能" class="headerlink" title="2.主要功能"></a>2.主要功能</h3><p>1.登录（认证）</p><p>2.添加角色</p><p>3.为角色分配菜单</p><p>4.添加用户</p><p>5.为用户分配角色</p><h3 id="3-搭建项目"><a href="#3-搭建项目" class="headerlink" title="3.搭建项目"></a>3.搭建项目</h3><p>1.创建父工程acl_parent: 管理依赖版本。</p><p>2.在父工程创建子模块</p><p>（1）common</p><ul><li><p>service_base：编写使用的工具类，例如MD5加密等等。</p></li><li><p>spring_security: springsecurity的相关配置。</p></li></ul><p>（2）infrastructure</p><ul><li>api_gateway: 配置网关内容。</li></ul><p>（3）service</p><ul><li>service_acl: 实现权限管理功能代码。</li></ul><p><img src="/img/s2.png" alt="02"></p><p><img src="/../img/s2.png" alt="02"></p><h3 id="4-spring-security内容"><a href="#4-spring-security内容" class="headerlink" title="4.spring_security内容"></a>4.spring_security内容</h3><p><img src="/img/s3.png" alt="03"></p><p><img src="/../img/s3.png" alt="03"></p><ul><li><p>TokenWebSecurityConfig：spring_security的整体配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class TokenWebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    private DefaultPasswordEncoder defaultPasswordEncoder;</span><br><span class="line">    private UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public TokenWebSecurityConfig(TokenManager tokenManager, RedisTemplate redisTemplate, DefaultPasswordEncoder defaultPasswordEncoder, UserDetailsService userDetailsService) &#123;</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">        this.defaultPasswordEncoder = defaultPasswordEncoder;</span><br><span class="line">        this.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置设置</span><br><span class="line">     */</span><br><span class="line">    //设置退出的地址和 token，redis 操作地址</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(new UnauthEntryPoint())   //没有权限处理的时候调用的处理器，换成我们自定义的</span><br><span class="line">                .and().csrf().disable()   //关闭csrf</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().logout().logoutUrl(&quot;/admin/acl/index/logout&quot;) //退出的路径</span><br><span class="line">                .addLogoutHandler(new TokenLogoutHandler(tokenManager,redisTemplate)).and()  //自定义的</span><br><span class="line">                .addFilter(new TokenLoginFilter(tokenManager, redisTemplate, authenticationManager()))   // 自定义的</span><br><span class="line">                .addFilter(new TokenAuthFilter(authenticationManager(), tokenManager, redisTemplate)).httpBasic();  //自定义的</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //配置自定义的密码处理</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(defaultPasswordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置哪些请求不拦截</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(WebSecurity web) throws Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(&quot;/api/**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SecurityUser：实现了UserDetails接口，框架中的User继承UserDetails接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Slf4j</span><br><span class="line">public class SecurityUser implements UserDetails &#123;</span><br><span class="line">    //当前登录用户</span><br><span class="line">    private transient User currentUserInfo;</span><br><span class="line">    //当前权限</span><br><span class="line">    private List&lt;String&gt; permissionValueList;</span><br><span class="line"></span><br><span class="line">    public SecurityUser() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public SecurityUser(User user) &#123;</span><br><span class="line">        if (user != null) &#123;</span><br><span class="line">            this.currentUserInfo = user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();</span><br><span class="line">        for(String permissionValue : permissionValueList) &#123;</span><br><span class="line">            if(StringUtils.isEmpty(permissionValue)) continue;</span><br><span class="line">            SimpleGrantedAuthority authority = new</span><br><span class="line">                    SimpleGrantedAuthority(permissionValue);</span><br><span class="line">            authorities.add(authority);</span><br><span class="line">        &#125;</span><br><span class="line">        return authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return currentUserInfo.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return currentUserInfo.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAccountNonLocked() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCredentialsNonExpired() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isEnabled() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private String nickName;</span><br><span class="line">    private String salt;</span><br><span class="line">    private String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenLoginFilter：用于登录时的过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class TokenLoginFilter extends UsernamePasswordAuthenticationFilter &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    private AuthenticationManager authenticationManager;   //源码中的</span><br><span class="line"></span><br><span class="line">    //为了在代码里面使用这些</span><br><span class="line">    public TokenLoginFilter(TokenManager tokenManager, RedisTemplate redisTemplate, AuthenticationManager authenticationManager) &#123;</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">        this.authenticationManager = authenticationManager;</span><br><span class="line">        this.setPostOnly(false);</span><br><span class="line">        this.setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(&quot;/admin/acl/login&quot;,&quot;POST&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取表单提交的用户名和密码</span><br><span class="line">    @Override</span><br><span class="line">    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            User user = new ObjectMapper().readValue(request.getInputStream(), User.class);</span><br><span class="line">            //封装成authentication</span><br><span class="line">            return authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(user.getUsername(),user.getPassword(),new ArrayList&lt;&gt;()));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //认证成功之后调用这个方法，通过authResult参数将认证的信息传递</span><br><span class="line">    @Override</span><br><span class="line">    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException &#123;</span><br><span class="line">        //得到认证成功之后的用户信息，SecurityUser implements UserDetails</span><br><span class="line">        SecurityUser user = (SecurityUser) authResult.getPrincipal();</span><br><span class="line">        //根据用户名生成token</span><br><span class="line">        String token = tokenManager.createToken(user.getCurrentUserInfo().getUsername());</span><br><span class="line">        //将用户名称和权限列表信息放入redis</span><br><span class="line">        redisTemplate.opsForValue().set(user.getCurrentUserInfo().getUsername(),user.getPermissionValueList());</span><br><span class="line"></span><br><span class="line">        ResponseUtil.out(response, R.ok().data(&quot;token&quot;,token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //认证失败调用的方法</span><br><span class="line">    @Override</span><br><span class="line">    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException &#123;</span><br><span class="line">        ResponseUtil.out(response,R.error());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenAuthFilter：用于授权时的过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class TokenAuthFilter extends BasicAuthenticationFilter &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    public TokenAuthFilter(AuthenticationManager authenticationManager,TokenManager tokenManager, RedisTemplate redisTemplate) &#123;</span><br><span class="line">        super(authenticationManager);</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        //获取当前认证成功的用户权限信息</span><br><span class="line">        UsernamePasswordAuthenticationToken authRequest = getAuthentication(request);</span><br><span class="line">        //如果有权限信息，就放到权限上下文中</span><br><span class="line">        if (authRequest!=null)&#123;</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) &#123;</span><br><span class="line">        //从header里面获取token</span><br><span class="line">        String token = request.getHeader(&quot;token&quot;);</span><br><span class="line">        if (token!=null)&#123;</span><br><span class="line">            //从token中获取用户名</span><br><span class="line">            String username = tokenManager.getUserInfoFromToken(token);</span><br><span class="line">            //从redis获取权限信息</span><br><span class="line">            List&lt;String&gt; permissionValueList = (List&lt;String&gt;) redisTemplate.opsForValue().get(username);</span><br><span class="line">            //将List&lt;String&gt;转换成Collection&lt;GrantedAuthority&gt;</span><br><span class="line">            Collection&lt;GrantedAuthority&gt; authority=new ArrayList&lt;&gt;();</span><br><span class="line">            for (String permissionValue: permissionValueList) &#123;</span><br><span class="line">                SimpleGrantedAuthority auth = new SimpleGrantedAuthority(permissionValue);</span><br><span class="line">                authority.add(auth);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return new UsernamePasswordAuthenticationToken(username,token,authority);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DefaultPasswordEncoder：自定义密码处理器，MD5加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DefaultPasswordEncoder implements PasswordEncoder &#123;</span><br><span class="line"></span><br><span class="line">    public DefaultPasswordEncoder() &#123;</span><br><span class="line">        this(-1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DefaultPasswordEncoder(int strength) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //进行MD5加密</span><br><span class="line">    @Override</span><br><span class="line">    public String encode(CharSequence charSequence) &#123;</span><br><span class="line">        return MD5.encrypt(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //进行密码的比对</span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(CharSequence charSequence, String encodedPassword) &#123;</span><br><span class="line">        return encodedPassword.equals(MD5.encrypt(charSequence.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenLogoutHandler：退出处理器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class TokenLogoutHandler implements LogoutHandler &#123;</span><br><span class="line">    private TokenManager tokenManager;</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    public TokenLogoutHandler(TokenManager tokenManager, RedisTemplate redisTemplate) &#123;</span><br><span class="line">        this.tokenManager = tokenManager;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) &#123;</span><br><span class="line">        //1.从header里面获取token</span><br><span class="line">        String token = request.getHeader(&quot;token&quot;);</span><br><span class="line">        //2.token不为空，先移除token，再从Redis里面删除token，Redis存了key为用户名，value为权限数据</span><br><span class="line">        if (token!=null)&#123;</span><br><span class="line">            //移除</span><br><span class="line">            tokenManager.removeToken(token);</span><br><span class="line">            //从token获取用户名</span><br><span class="line">            String username = tokenManager.getUserInfoFromToken(token);</span><br><span class="line">            //从redis移除token</span><br><span class="line">            redisTemplate.delete(username);</span><br><span class="line">        &#125;</span><br><span class="line">        ResponseUtil.out(response, R.ok());  //响应头返回内容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TokenManager：token操作工具类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TokenManager &#123;</span><br><span class="line">    //token有效时间</span><br><span class="line">    private long tokenEcpiratin=24*60*60*1000;</span><br><span class="line">    //编码密钥</span><br><span class="line">    private String tokenSignKey=&quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">    //1.使用JWT根据用户名生成token</span><br><span class="line">    public String createToken(String username)&#123;</span><br><span class="line">        String token= Jwts.builder().setSubject(username)</span><br><span class="line">                .setExpiration(new Date(System.currentTimeMillis()+tokenEcpiratin))   //设置token过期时间</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512,tokenSignKey).compressWith(CompressionCodecs.GZIP).compact();   //设置编码密钥</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //根据token得到用户信息</span><br><span class="line">    public String getUserInfoFromToken(String token)&#123;</span><br><span class="line">        String userinfo = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token).getBody().getSubject();</span><br><span class="line">        return userinfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //删除token</span><br><span class="line">    public void removeToken(String token)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UnauthEntryPoint：用户为授权的处理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UnauthEntryPoint implements AuthenticationEntryPoint &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &#123;</span><br><span class="line">        ResponseUtil.out(httpServletResponse, R.error());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserDetailsServiceImpl：查数据库进行用户认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Service(&quot;userDetailsService&quot;)</span><br><span class="line">public class UserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">        //根据用户名查询数据</span><br><span class="line">        User user = userService.selectByUsername(username);</span><br><span class="line">        //判断</span><br><span class="line">        if(user == null) &#123;</span><br><span class="line">            throw new UsernameNotFoundException(&quot;用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        com.atguigu.security.entity.User curUser = new com.atguigu.security.entity.User();</span><br><span class="line">        BeanUtils.copyProperties(user,curUser);</span><br><span class="line"></span><br><span class="line">        //根据用户查询用户权限列表</span><br><span class="line">        List&lt;String&gt; permissionValueList = permissionService.selectPermissionValueByUserId(user.getId());</span><br><span class="line">        SecurityUser securityUser = new SecurityUser();</span><br><span class="line">        securityUser.setCurrentUserInfo(curUser);</span><br><span class="line">        securityUser.setPermissionValueList(permissionValueList);</span><br><span class="line">        return securityUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/post/f41870e2.html"/>
      <url>/post/f41870e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="java8新特性内容"><a href="#java8新特性内容" class="headerlink" title="java8新特性内容"></a>java8新特性内容</h2><p><img src="/../img/j1.png" alt="01"></p><p><img src="/img/j1.png" alt="01"></p><p>@[TOC]</p><h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1.Lambda表达式"></a>1.Lambda表达式</h2><h3 id="1-1-Lambda介绍"><a href="#1-1-Lambda介绍" class="headerlink" title="1.1 Lambda介绍"></a>1.1 Lambda介绍</h3><p> Lambda是一个匿名函数，可以理解为一段可以传递的代码（将代码像数据一样传递）；可以写出更简洁、更灵活的代码；作为一种更紧凑的代码风格，是Java语言表达能力得到提升。</p><h3 id="1-2-从匿名内部类到Lambda表达式"><a href="#1-2-从匿名内部类到Lambda表达式" class="headerlink" title="1.2 从匿名内部类到Lambda表达式"></a>1.2 从匿名内部类到Lambda表达式</h3><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// Lambda 表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (a, b) -&gt; Integer.compare(a, b);</span><br><span class="line"></span><br><span class="line">    TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3Lambda表达式语法"><a href="#1-3Lambda表达式语法" class="headerlink" title="1.3Lambda表达式语法"></a>1.3Lambda表达式语法</h3><p>Lambda 表达式在Java 语言中引入了一个新的语法元<br>素和操作符。这个操作符为 “-&gt;”， 该操作符被称<br>为 Lambda 操作符或剪头操作符。它将 Lambda 分为<br>两个部分：<br>左侧：指定了 Lambda 表达式需要的所有参数<br>右侧：指定了 Lambda 体，即 Lambda 表达式要执行<br>的功能。</p><h3 id="1-4-Lambda表达式举例"><a href="#1-4-Lambda表达式举例" class="headerlink" title="1.4 Lambda表达式举例"></a>1.4 Lambda表达式举例</h3><h4 id="语法格式一：无参，无返回值"><a href="#语法格式一：无参，无返回值" class="headerlink" title="语法格式一：无参，无返回值"></a>语法格式一：无参，无返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//未使用Lambda表达式</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    r1.run();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    r2.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式二：Lambda-需要一个参数，但是没有返回值。"><a href="#语法格式二：Lambda-需要一个参数，但是没有返回值。" class="headerlink" title="语法格式二：Lambda 需要一个参数，但是没有返回值。"></a>语法格式二：Lambda 需要一个参数，但是没有返回值。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//未使用Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    con.accept(<span class="string">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”"><a href="#语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”" class="headerlink" title="语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”"></a>语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式三使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式三使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = (s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式四：Lambda-若只需要一个参数时，参数的小括号可以省略"><a href="#语法格式四：Lambda-若只需要一个参数时，参数的小括号可以省略" class="headerlink" title="语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略"></a>语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式四使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式四使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式五：Lambda-需要两个或以上的参数，多条执行语句，并且可以有返回值"><a href="#语法格式五：Lambda-需要两个或以上的参数，多条执行语句，并且可以有返回值" class="headerlink" title="语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值"></a>语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式五使用前</span></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式五使用后</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; &#123;</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">        System.out.println(o2);</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(com2.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法格式六：当-Lambda-体只有一条语句时，return-与大括号若有，都可以省略"><a href="#语法格式六：当-Lambda-体只有一条语句时，return-与大括号若有，都可以省略" class="headerlink" title="语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略"></a>语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式六使用前</span></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = (o1,o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(com1.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式六使用后</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; o1.compareTo(o2);</span><br><span class="line"></span><br><span class="line">    System.out.println(com2.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式六使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = s -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式六使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);</span><br><span class="line"></span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-语法总结"><a href="#1-5-语法总结" class="headerlink" title="1.5 语法总结"></a>1.5 语法总结</h3><p>-&gt;的左边：lambda的形参列表，参数的类型可以省略。如果形参只有一个，（）也可以省略。<br>-&gt;的右边：lambda体，对应着重写的方法体。如果方法体中只有一行执行语句，则{}可以省略，return也得省略。</p><h2 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2 函数式接口"></a>2 函数式接口</h2><h3 id="2-1-什么是函数式接口"><a href="#2-1-什么是函数式接口" class="headerlink" title="2.1 什么是函数式接口"></a>2.1 什么是函数式接口</h3><p>如果接口中只声明一个抽象方法，则此接口就称为函数式接口。只有给函数式接口提供实现类的对象时，才可以使用Lambda表达式。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><img src="https://img-blog.csdnimg.cn/acefdb3063284dedbade91b62186f665.png" alt="在这里插入图片描述"><br>还有以下这些：<br>•java.lang.Runnable<br>        public void run()</p><p>•java.lang.Iterable<br>        public Iterator iterate()</p><p>•java.lang.Comparable<br>        public int compareTo(T t)</p><p>•java.util.Comparator<br>        public int compare(T t1, T t2)</p><h3 id="2-2自定义函数式接口"><a href="#2-2自定义函数式接口" class="headerlink" title="2.2自定义函数式接口"></a>2.2自定义函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFunctionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFunctionalInterfaceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyFunctionalInterface</span> <span class="variable">m</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        m.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-四大核心函数式接口"><a href="#2-3-四大核心函数式接口" class="headerlink" title="2.3 四大核心函数式接口"></a>2.3 四大核心函数式接口</h3><table><thead><tr><th>函数式接口</th><th>称谓</th><th>参数类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer&lt; T &gt;</td><td>消费型接口</td><td>T</td><td>对类型为T的对象应用操作，包含方法： void accept(T t)</td></tr><tr><td>Supplier&lt; T&gt;</td><td>供给型接口</td><td>无</td><td>返回类型为T的对象，包含方法：T get()</td></tr><tr><td>Function&lt;T, R&gt;</td><td>函数型接口</td><td>T</td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)</td></tr><tr><td>Predicate<T></td><td>判断型接口</td><td>T</td><td>确定类型为T的对象是否满足某约束，并返回 boolean 值。包含方法：boolean test(T t)</td></tr></tbody></table><h2 id="3-方法引用与构造器引用"><a href="#3-方法引用与构造器引用" class="headerlink" title="3.方法引用与构造器引用"></a>3.方法引用与构造器引用</h2><ul><li>方法引用可以看做是Lambda表达式深层次的表达。</li><li>当需要提供一个函数式接口的实例时，我们可以使用lambda表达式提供此实例。当满足一定条件时，我们可以使用方法引用或构造器引用替换lambda表达式。</li><li>换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</li></ul><h3 id="3-1-方法引用格式"><a href="#3-1-方法引用格式" class="headerlink" title="3.1 方法引用格式"></a>3.1 方法引用格式</h3><p>格式：</p><ul><li>类（对象）:方法名</li><li>使用方法引用操作符 “::” 将类(或对象) 与 方法名分隔开来。</li><li>两个:中间不能有空格，而且必须英文状态下半角输入</li></ul><p>如下三种主要使用情况：<br>-情况1：对象 :: 实例方法名</p><ul><li>情况2：类 :: 静态方法名</li><li>   情况3：类 :: 实例方法名</li></ul><h3 id="3-2-对象-实例方法名"><a href="#3-2-对象-实例方法名" class="headerlink" title="3.2 对象 :: 实例方法名"></a>3.2 对象 :: 实例方法名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Consumer&lt;String&gt; con1 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">con1.accept(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. lambda表达式</span></span><br><span class="line">Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);</span><br><span class="line">con2.accept(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">Consumer&lt;String&gt; con3 = ps :: println;</span><br><span class="line">con3.accept(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="number">34</span>, <span class="number">6000.38</span>);</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Supplier&lt;String&gt; sup1 = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> emp.getName();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. lambda表达式</span></span><br><span class="line">Supplier&lt;String&gt; sup2 = () -&gt; emp.getName();</span><br><span class="line">System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line">Supplier&lt;String&gt; sup3 = emp::getName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>要求总结：函数式接口中的抽象方法a与其内部实现时调用的对象的某个方法b的形参列表和返回值类型都相同。<br>此时可以考虑使用方法b实现对方法a的替换，覆盖。</strong></p><p><strong>注意点：此方法b是非静态的方法，需要对象调用</strong></p><h3 id="3-3-类-静态方法名"><a href="#3-3-类-静态方法名" class="headerlink" title="3.3 类 :: 静态方法名"></a>3.3 类 :: 静态方法名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(com1.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">System.out.println(com2.compare(<span class="number">21</span>, <span class="number">34</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line">Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class="line">System.out.println(com3.compare(<span class="number">34</span>, <span class="number">34</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Function&lt;Double,Long&gt; fun1 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.round(aDouble);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">Function&lt;Double,Long&gt; fun2 = aDouble -&gt; Math.round(aDouble);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.方法引用</span></span><br><span class="line">Function&lt;Double,Long&gt; fun3 = Math :: round;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数式接口中的抽象方法a在被重写时使用了某一个类的静态方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</strong></p><p><strong>注意：此方法b是静态的方法，需要类调用</strong></p><h3 id="3-4-类-实例方法"><a href="#3-4-类-实例方法" class="headerlink" title="3.4 类 :: 实例方法"></a>3.4 类 :: 实例方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">Comparator&lt;String&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.lambda表达式</span></span><br><span class="line">Comparator&lt;String&gt; com2 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">System.out.println(com2.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abb&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line">Comparator&lt;String&gt; com3 = String :: compareTo;</span><br><span class="line">System.out.println(com3.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abb&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line">BiPredicate&lt;String,String&gt; biPre1 = <span class="keyword">new</span> <span class="title class_">BiPredicate</span>&lt;String, String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s1.equals(s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line">BiPredicate&lt;String,String&gt; biPre2 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 方法引用</span></span><br><span class="line">BiPredicate&lt;String,String&gt; biPre3 = String :: equals;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>要求：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的返回值类型与方法b的返回值类型相同，同时方法a的形参列表中有n个参数，方法b的形参列表有n-1个参数，且方法a的第1个参数作为方法b的调用者，且方法a的后n-1参数与方法b的n-1参数匹配（类型相同或满足多态场景也可以）</strong></p><p><strong>注意：此方法b是非静态的方法，需要对象调用。但是形式上写成对象a所属的类。</strong></p><h3 id="3-5-构造器引用"><a href="#3-5-构造器引用" class="headerlink" title="3.5 构造器引用"></a>3.5 构造器引用</h3><p>当Lambda表达式是创建一个对象，并且满足Lambda表达式形参，正好是给创建这个对象的构造器的实参列表，就可以使用构造器引用。</p><p>格式：类名::new;</p><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        Supplier&lt;Employee&gt; sup1 = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.构造器引用</span></span><br><span class="line">        Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>; <span class="comment">//调用的是Employee类中空参的构造器</span></span><br><span class="line">        System.out.println(sup2.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    Function&lt;Integer,Employee&gt; func1 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Employee&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Employee <span class="title function_">apply</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(func1.apply(<span class="number">12</span>));</span><br><span class="line">    <span class="comment">//2.构造器引用</span></span><br><span class="line">    Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>; <span class="comment">//调用的是Employee类中参数是Integer/int类型的构造器</span></span><br><span class="line">    System.out.println(func2.apply(<span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组引用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组引用</span></span><br><span class="line">   <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//1.</span></span><br><span class="line">       Function&lt;Integer,Employee[]&gt; func1 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Employee[]&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Employee[] apply(Integer length) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>[length];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(func1.apply(<span class="number">10</span>).length);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.</span></span><br><span class="line">       Function&lt;Integer,Employee[]&gt; func2 = Employee[] :: <span class="keyword">new</span>;</span><br><span class="line">       System.out.println(func2.apply(<span class="number">20</span>).length);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4-Stream-API"><a href="#4-Stream-API" class="headerlink" title="4 Stream API"></a>4 Stream API</h2><ul><li>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</li><li>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，讲的是数据，而 Stream 是有关计算的，讲的是计算。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</li><li>注意：<br>①Stream 自己不会存储元素。<br>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。<br>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。即一旦执行终止操作，就执行中间操作链，并产生结果。<br>④ Stream一旦执行了终止操作，就不能再调用其它中间操作或终止操作了。</li></ul><h3 id="4-1-Stream的执行流程"><a href="#4-1-Stream的执行流程" class="headerlink" title="4.1 Stream的执行流程"></a>4.1 Stream的执行流程</h3><p><strong>1- 创建 Stream</strong><br>一个数据源（如：集合、数组），获取一个流</p><p><strong>2- 中间操作</strong><br>每次处理都会返回一个持有结果的新Stream，即中间操作的方法返回值仍然是Stream类型的对象。因此中间操作可以是个<code>操作链</code>，可对数据源的数据进行n次处理，但是在终结操作前，并不会真正执行。</p><p><strong>3- 终止操作(终端操作)</strong><br>终止操作的方法返回值类型就不再是Stream了，因此一旦执行终止操作，就结束整个Stream操作了。一旦执行终止操作，就执行中间操作链，最终产生结果并结束Stream。<br><img src="https://img-blog.csdnimg.cn/7a2e8d192e294b4eaebd670cb05a5c49.png" alt="在这里插入图片描述"></p><h3 id="4-2-创建Stream"><a href="#4-2-创建Stream" class="headerlink" title="4.2 创建Stream"></a>4.2 创建Stream</h3><ul><li>1.方式一：通过集合<br>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：<br>default Stream stream() : 返回一个顺序流<br>default Stream parallelStream() : 返回一个并行流<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream1 = list.parallelStream();</span><br><span class="line"></span><br><span class="line">        System.out.println(stream);</span><br><span class="line">        System.out.println(stream1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>2.创建 Stream方式二：通过数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">stream1</span> <span class="operator">=</span> Arrays.stream(arr1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>创建 Stream方式三：通过Stream的of() <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">     Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;SS&quot;</span>, <span class="string">&quot;DD&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h3 id="4-3-一系列中间操作"><a href="#4-3-一系列中间操作" class="headerlink" title="4.3 一系列中间操作"></a>4.3 一系列中间操作</h3><p>1.筛选与切片</p><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>filter(Predicatep)</strong></td><td>接收  Lambda ， 从流中排除某些元素</td></tr><tr><td><strong>distinct()</strong></td><td>筛选，通过流所生成元素的  hashCode() 和 equals() 去除重复元素</td></tr><tr><td><strong>limit(long maxSize)</strong></td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><strong>skip(long n)</strong></td><td>跳过元素，返回一个扔掉了前  n 个元素的流。<br>若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td></tr></tbody></table><p>2.映 射</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>map(Function f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td><strong>mapToDouble(ToDoubleFunction f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td></tr><tr><td><strong>mapToInt(ToIntFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  IntStream。</td></tr><tr><td><strong>mapToLong(ToLongFunction  f)</strong></td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的  LongStream。</td></tr><tr><td><strong>flatMap(Function  f)</strong></td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table><p>3.排序</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>sorted()</strong></td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td><strong>sorted(Comparator</strong> <strong>com)</strong></td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAPITest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-筛选与切片</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        filter(Predicate p)——接收 Lambda，从流中排除某些元素。</span></span><br><span class="line">        <span class="comment">//练习：查询员工表中薪资大于7000的员工信息</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line">        stream.filter(emp -&gt; emp.getSalary() &gt; <span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        limit(n)——截断流，使其元素不超过给定数量。</span></span><br><span class="line">        <span class="comment">//错误的。因为stream已经执行了终止操作，就不可以再调用其它的中间操作或终止操作了。</span></span><br><span class="line"><span class="comment">//        stream.limit(2).forEach(System.out::println);</span></span><br><span class="line">        list.stream().filter(emp -&gt; emp.getSalary() &gt; <span class="number">7000</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line">        list.stream().skip(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1009</span>, <span class="string">&quot;马斯克&quot;</span>, <span class="number">40</span>, <span class="number">12500.32</span>));</span><br><span class="line"></span><br><span class="line">        list.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-映射</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，</span></span><br><span class="line">        <span class="comment">//并将其映射成一个新的元素。</span></span><br><span class="line">        <span class="comment">//练习：转换为大写</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        list.stream().map(String :: toUpperCase).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习：获取员工姓名长度大于3的员工。</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        employees.stream().filter(emp -&gt; emp.getName().length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习：获取员工姓名长度大于3的员工的姓名。</span></span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        employees.stream().filter(emp -&gt; emp.getName().length() &gt; <span class="number">3</span>).map(emp -&gt; emp.getName()).forEach(System.out::println);</span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        employees.stream().map(emp -&gt; emp.getName()).filter(name -&gt; name.length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">//方式3：</span></span><br><span class="line">        employees.stream().map(Employee::getName).filter(name -&gt; name.length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//sorted()——自然排序</span></span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">345</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">3</span>,<span class="number">46</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">65</span>,<span class="number">68</span>&#125;;</span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;DD&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;SS&quot;</span>,<span class="string">&quot;JJ&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.stream(arr).sorted().forEach(System.out::println);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//arr数组并没有因为升序，做调整。</span></span><br><span class="line"></span><br><span class="line">        Arrays.stream(arr1).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Employee没有实现Comparable接口，所以报错！要想实现自然排序，需要当前的类实现Comparable接口</span></span><br><span class="line"><span class="comment">//        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span></span><br><span class="line"><span class="comment">//        list.stream().sorted().forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//sorted(Comparator com)——定制排序</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        list.stream().sorted((e1,e2) -&gt; e1.getAge() - e2.getAge()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//针对于字符串从大大小排列</span></span><br><span class="line">        Arrays.stream(arr1).sorted((s1,s2) -&gt; -s1.compareTo(s2)).forEach(System.out::println);</span><br><span class="line"><span class="comment">//        Arrays.stream(arr1).sorted(String :: compareTo).forEach(System.out::println);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4-终止操作"><a href="#4-4-终止操作" class="headerlink" title="4.4 终止操作"></a>4.4 终止操作</h3><ul><li><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</p></li><li><p>流进行了终止操作后，不能再次使用。</p></li></ul><p>1-匹配与查找</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>allMatch(Predicate  p)</strong></td><td>检查是否匹配所有元素</td></tr><tr><td>**anyMatch(Predicate  p)  **</td><td>检查是否至少匹配一个元素</td></tr><tr><td><strong>noneMatch(Predicate</strong>  <strong>p)</strong></td><td>检查是否没有匹配所有元素</td></tr><tr><td><strong>findFirst()</strong></td><td>返回第一个元素</td></tr><tr><td><strong>findAny()</strong></td><td>返回当前流中的任意元素</td></tr><tr><td><strong>count()</strong></td><td>返回流中元素总数</td></tr><tr><td><strong>max(Comparator c)</strong></td><td>返回流中最大值</td></tr><tr><td><strong>min(Comparator c)</strong></td><td>返回流中最小值</td></tr><tr><td><strong>forEach(Consumer c)</strong></td><td>内部迭代(使用  Collection  接口需要用户去做迭代，称为外部迭代。<br>相反，Stream  API 使用内部迭代——它帮你把迭代做了)</td></tr></tbody></table><p>2-归约</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>reduce(T  identity, BinaryOperator b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回  T</td></tr><tr><td><strong>reduce(BinaryOperator  b)</strong></td><td>可以将流中元素反复结合起来，得到一个值。返回 Optional<T></td></tr></tbody></table><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。</p><p>3-收集</p><table><thead><tr><th><strong>方   法</strong></th><th><strong>描   述</strong></th></tr></thead><tbody><tr><td><strong>collect(Collector  c)</strong></td><td>将流转换为其他形式。接收一个  Collector接口的实现，<br>用于给Stream中元素做汇总的方法</td></tr></tbody></table><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。</p><p>另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toList</strong></td><td>Collector&lt;T, ?, List<T>&gt;</td><td>把流中元素收集到List</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; emps= list.stream().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toSet</strong></td><td>Collector&lt;T, ?, Set<T>&gt;</td><td>把流中元素收集到Set</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Employee&gt; emps= list.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>toCollection</strong></td><td>Collector&lt;T, ?, C&gt;</td><td>把流中元素收集到创建的集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Employee&gt; emps =list.stream().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>counting</strong></td><td>Collector&lt;T, ?, Long&gt;</td><td>计算流中元素的个数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summingInt</strong></td><td>Collector&lt;T, ?, Integer&gt;</td><td>对流中元素的整数属性求和</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.summingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>averagingInt</strong></td><td>Collector&lt;T, ?, Double&gt;</td><td>计算流中元素Integer属性的平均值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> list.stream().collect(Collectors.averagingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>summarizingInt</strong></td><td>Collector&lt;T, ?, IntSummaryStatistics&gt;</td><td>收集流中Integer属性的统计值。如：平均值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> SummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>joining</strong></td><td>Collector&lt;CharSequence, ?, String&gt;</td><td>连接流中每个字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str= list.stream().map(Employee::getName).collect(Collectors.joining());</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>maxBy</strong></td><td>Collector&lt;T, ?, Optional<T>&gt;</td><td>根据比较器选择最大值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt;max= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>minBy</strong></td><td>Collector&lt;T, ?, Optional<T>&gt;</td><td>根据比较器选择最小值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Emp&gt; min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>reducing</strong></td><td>Collector&lt;T, ?, Optional<T>&gt;</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total=list.stream().collect(Collectors.reducing(<span class="number">0</span>, Employee::getSalar, Integer::sum));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>collectingAndThen</strong></td><td>Collector&lt;T,A,RR&gt;</td><td>包裹另一个收集器，对其结果转换函数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> how= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>groupingBy</strong></td><td>Collector&lt;T, ?, Map&lt;K, List<T>&gt;&gt;</td><td>根据某属性值对流分组，属性为K，结果为V</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Emp.Status, List&lt;Emp&gt;&gt; map= list.stream().collect(Collectors.groupingBy(Employee::getStatus));</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>方法</strong></th><th><strong>返回类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>partitioningBy</strong></td><td>Collector&lt;T, ?, Map&lt;Boolean, List<T>&gt;&gt;</td><td>根据true或false进行分区</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean,List&lt;Emp&gt;&gt; vd = list.stream().collect(Collectors.partitioningBy(Employee::getManage));</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAPITest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-匹配与查找</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class="line"><span class="comment">//          练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        System.out.println(list.stream().allMatch(emp -&gt; emp.getAge() &gt; <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class="line">        <span class="comment">//练习：是否存在年龄大于18岁的员工</span></span><br><span class="line">        System.out.println(list.stream().anyMatch(emp -&gt; emp.getAge() &gt; <span class="number">18</span>));</span><br><span class="line"><span class="comment">//         练习：是否存在员工的工资大于 10000</span></span><br><span class="line">        System.out.println(list.stream().anyMatch(emp -&gt; emp.getSalary() &gt; <span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        findFirst——返回第一个元素</span></span><br><span class="line">        System.out.println(list.stream().findFirst().get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// count——返回流中元素的总个数</span></span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        System.out.println(list.stream().filter(emp -&gt; emp.getSalary() &gt; <span class="number">7000</span>).count());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        max(Comparator c)——返回流中最大值</span></span><br><span class="line">        <span class="comment">//练习：返回最高工资的员工</span></span><br><span class="line">        System.out.println(list.stream().max((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        练习：返回最高的工资：</span></span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        System.out.println(list.stream().max((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())).get().getSalary());</span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        System.out.println(list.stream().map(emp -&gt; emp.getSalary()).max((salary1, salary2) -&gt; Double.compare(salary1, salary2)).get());</span><br><span class="line">        System.out.println(list.stream().map(emp -&gt; emp.getSalary()).max(Double::compare).get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        min(Comparator c)——返回流中最小值</span></span><br><span class="line"><span class="comment">//        练习：返回最低工资的员工</span></span><br><span class="line">        System.out.println(list.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        forEach(Consumer c)——内部迭代</span></span><br><span class="line">        list.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//针对于集合，jdk8中增加了一个遍历的方法</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">        <span class="comment">//针对于List来说，遍历的方式：① 使用Iterator ② 增强for ③ 一般for ④ forEach()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-归约</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line"><span class="comment">//        练习1：计算1-10的自然数的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">0</span>, (x1, x2) -&gt; x1 + x2));</span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">0</span>, (x1, x2) -&gt; Integer.sum(x1,x2)));</span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">0</span>, Integer::sum));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(list.stream().reduce(<span class="number">10</span>, (x1, x2) -&gt; x1 + x2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line"><span class="comment">//        练习2：计算公司所有员工工资的总和</span></span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployees();</span><br><span class="line">        System.out.println(employeeList.stream().map(emp -&gt; emp.getSalary()).reduce((salary1, salary2) -&gt; Double.sum(salary1, salary2)));</span><br><span class="line">        System.out.println(employeeList.stream().map(emp -&gt; emp.getSalary()).reduce(Double::sum));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-收集</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">//        collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line"><span class="comment">//        练习1：查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class="line">        List&lt;Employee&gt; list1 = list.stream().filter(emp -&gt; emp.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line">        list1.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        练习2：按照员工的年龄进行排序，返回到一个新的List中</span></span><br><span class="line">        List&lt;Employee&gt; list2 = list.stream().sorted((e1, e2) -&gt; e1.getAge() - e2.getAge()).collect(Collectors.toList());</span><br><span class="line">        list2.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
